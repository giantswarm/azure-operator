package batch

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/Azure/go-autorest/autorest/to"
	"net/http"
)

// AccountKeyType enumerates the values for account key type.
type AccountKeyType string

const (
	// Primary specifies the primary state for account key type.
	Primary AccountKeyType = "Primary"
	// Secondary specifies the secondary state for account key type.
	Secondary AccountKeyType = "Secondary"
)

// AllocationState enumerates the values for allocation state.
type AllocationState string

const (
	// Resizing specifies the resizing state for allocation state.
	Resizing AllocationState = "Resizing"
	// Steady specifies the steady state for allocation state.
	Steady AllocationState = "Steady"
	// Stopping specifies the stopping state for allocation state.
	Stopping AllocationState = "Stopping"
)

// AutoUserScope enumerates the values for auto user scope.
type AutoUserScope string

const (
	// AutoUserScopePool specifies the auto user scope pool state for auto user scope.
	AutoUserScopePool AutoUserScope = "Pool"
	// AutoUserScopeTask specifies the auto user scope task state for auto user scope.
	AutoUserScopeTask AutoUserScope = "Task"
)

// CachingType enumerates the values for caching type.
type CachingType string

const (
	// None specifies the none state for caching type.
	None CachingType = "None"
	// ReadOnly specifies the read only state for caching type.
	ReadOnly CachingType = "ReadOnly"
	// ReadWrite specifies the read write state for caching type.
	ReadWrite CachingType = "ReadWrite"
)

// CertificateFormat enumerates the values for certificate format.
type CertificateFormat string

const (
	// Cer specifies the cer state for certificate format.
	Cer CertificateFormat = "Cer"
	// Pfx specifies the pfx state for certificate format.
	Pfx CertificateFormat = "Pfx"
)

// CertificateProvisioningState enumerates the values for certificate provisioning state.
type CertificateProvisioningState string

const (
	// Deleting specifies the deleting state for certificate provisioning state.
	Deleting CertificateProvisioningState = "Deleting"
	// Failed specifies the failed state for certificate provisioning state.
	Failed CertificateProvisioningState = "Failed"
	// Succeeded specifies the succeeded state for certificate provisioning state.
	Succeeded CertificateProvisioningState = "Succeeded"
)

// CertificateStoreLocation enumerates the values for certificate store location.
type CertificateStoreLocation string

const (
	// CurrentUser specifies the current user state for certificate store location.
	CurrentUser CertificateStoreLocation = "CurrentUser"
	// LocalMachine specifies the local machine state for certificate store location.
	LocalMachine CertificateStoreLocation = "LocalMachine"
)

// CertificateVisibility enumerates the values for certificate visibility.
type CertificateVisibility string

const (
	// CertificateVisibilityRemoteUser specifies the certificate visibility remote user state for certificate visibility.
	CertificateVisibilityRemoteUser CertificateVisibility = "RemoteUser"
	// CertificateVisibilityStartTask specifies the certificate visibility start task state for certificate visibility.
	CertificateVisibilityStartTask CertificateVisibility = "StartTask"
	// CertificateVisibilityTask specifies the certificate visibility task state for certificate visibility.
	CertificateVisibilityTask CertificateVisibility = "Task"
)

// ComputeNodeDeallocationOption enumerates the values for compute node deallocation option.
type ComputeNodeDeallocationOption string

const (
	// Requeue specifies the requeue state for compute node deallocation option.
	Requeue ComputeNodeDeallocationOption = "Requeue"
	// RetainedData specifies the retained data state for compute node deallocation option.
	RetainedData ComputeNodeDeallocationOption = "RetainedData"
	// TaskCompletion specifies the task completion state for compute node deallocation option.
	TaskCompletion ComputeNodeDeallocationOption = "TaskCompletion"
	// Terminate specifies the terminate state for compute node deallocation option.
	Terminate ComputeNodeDeallocationOption = "Terminate"
)

// ComputeNodeFillType enumerates the values for compute node fill type.
type ComputeNodeFillType string

const (
	// Pack specifies the pack state for compute node fill type.
	Pack ComputeNodeFillType = "Pack"
	// Spread specifies the spread state for compute node fill type.
	Spread ComputeNodeFillType = "Spread"
)

// ElevationLevel enumerates the values for elevation level.
type ElevationLevel string

const (
	// Admin specifies the admin state for elevation level.
	Admin ElevationLevel = "Admin"
	// NonAdmin specifies the non admin state for elevation level.
	NonAdmin ElevationLevel = "NonAdmin"
)

// InboundEndpointProtocol enumerates the values for inbound endpoint protocol.
type InboundEndpointProtocol string

const (
	// TCP specifies the tcp state for inbound endpoint protocol.
	TCP InboundEndpointProtocol = "TCP"
	// UDP specifies the udp state for inbound endpoint protocol.
	UDP InboundEndpointProtocol = "UDP"
)

// InterNodeCommunicationState enumerates the values for inter node communication state.
type InterNodeCommunicationState string

const (
	// Disabled specifies the disabled state for inter node communication state.
	Disabled InterNodeCommunicationState = "Disabled"
	// Enabled specifies the enabled state for inter node communication state.
	Enabled InterNodeCommunicationState = "Enabled"
)

// NameAvailabilityReason enumerates the values for name availability reason.
type NameAvailabilityReason string

const (
	// AlreadyExists specifies the already exists state for name availability reason.
	AlreadyExists NameAvailabilityReason = "AlreadyExists"
	// Invalid specifies the invalid state for name availability reason.
	Invalid NameAvailabilityReason = "Invalid"
)

// NetworkSecurityGroupRuleAccess enumerates the values for network security group rule access.
type NetworkSecurityGroupRuleAccess string

const (
	// Allow specifies the allow state for network security group rule access.
	Allow NetworkSecurityGroupRuleAccess = "Allow"
	// Deny specifies the deny state for network security group rule access.
	Deny NetworkSecurityGroupRuleAccess = "Deny"
)

// PackageState enumerates the values for package state.
type PackageState string

const (
	// Active specifies the active state for package state.
	Active PackageState = "Active"
	// Pending specifies the pending state for package state.
	Pending PackageState = "Pending"
	// Unmapped specifies the unmapped state for package state.
	Unmapped PackageState = "Unmapped"
)

// PoolAllocationMode enumerates the values for pool allocation mode.
type PoolAllocationMode string

const (
	// BatchService specifies the batch service state for pool allocation mode.
	BatchService PoolAllocationMode = "BatchService"
	// UserSubscription specifies the user subscription state for pool allocation mode.
	UserSubscription PoolAllocationMode = "UserSubscription"
)

// PoolProvisioningState enumerates the values for pool provisioning state.
type PoolProvisioningState string

const (
	// PoolProvisioningStateDeleting specifies the pool provisioning state deleting state for pool provisioning state.
	PoolProvisioningStateDeleting PoolProvisioningState = "Deleting"
	// PoolProvisioningStateSucceeded specifies the pool provisioning state succeeded state for pool provisioning state.
	PoolProvisioningStateSucceeded PoolProvisioningState = "Succeeded"
)

// ProvisioningState enumerates the values for provisioning state.
type ProvisioningState string

const (
	// ProvisioningStateCancelled specifies the provisioning state cancelled state for provisioning state.
	ProvisioningStateCancelled ProvisioningState = "Cancelled"
	// ProvisioningStateCreating specifies the provisioning state creating state for provisioning state.
	ProvisioningStateCreating ProvisioningState = "Creating"
	// ProvisioningStateDeleting specifies the provisioning state deleting state for provisioning state.
	ProvisioningStateDeleting ProvisioningState = "Deleting"
	// ProvisioningStateFailed specifies the provisioning state failed state for provisioning state.
	ProvisioningStateFailed ProvisioningState = "Failed"
	// ProvisioningStateInvalid specifies the provisioning state invalid state for provisioning state.
	ProvisioningStateInvalid ProvisioningState = "Invalid"
	// ProvisioningStateSucceeded specifies the provisioning state succeeded state for provisioning state.
	ProvisioningStateSucceeded ProvisioningState = "Succeeded"
)

// StorageAccountType enumerates the values for storage account type.
type StorageAccountType string

const (
	// PremiumLRS specifies the premium lrs state for storage account type.
	PremiumLRS StorageAccountType = "Premium_LRS"
	// StandardLRS specifies the standard lrs state for storage account type.
	StandardLRS StorageAccountType = "Standard_LRS"
)

// Account is contains information about an Azure Batch account.
type Account struct {
	autorest.Response  `json:"-"`
	ID                 *string             `json:"id,omitempty"`
	Name               *string             `json:"name,omitempty"`
	Type               *string             `json:"type,omitempty"`
	Location           *string             `json:"location,omitempty"`
	Tags               *map[string]*string `json:"tags,omitempty"`
	*AccountProperties `json:"properties,omitempty"`
}

// AccountCreateParameters is parameters supplied to the Create operation.
type AccountCreateParameters struct {
	Location                 *string             `json:"location,omitempty"`
	Tags                     *map[string]*string `json:"tags,omitempty"`
	*AccountCreateProperties `json:"properties,omitempty"`
}

// AccountCreateProperties is the properties of a Batch account.
type AccountCreateProperties struct {
	AutoStorage        *AutoStorageBaseProperties `json:"autoStorage,omitempty"`
	PoolAllocationMode PoolAllocationMode         `json:"poolAllocationMode,omitempty"`
	KeyVaultReference  *KeyVaultReference         `json:"keyVaultReference,omitempty"`
}

// AccountKeys is a set of Azure Batch account keys.
type AccountKeys struct {
	autorest.Response `json:"-"`
	AccountName       *string `json:"accountName,omitempty"`
	Primary           *string `json:"primary,omitempty"`
	Secondary         *string `json:"secondary,omitempty"`
}

// AccountListResult is values returned by the List operation.
type AccountListResult struct {
	autorest.Response `json:"-"`
	Value             *[]Account `json:"value,omitempty"`
	NextLink          *string    `json:"nextLink,omitempty"`
}

// AccountListResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client AccountListResult) AccountListResultPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// AccountProperties is account specific properties.
type AccountProperties struct {
	AccountEndpoint              *string                `json:"accountEndpoint,omitempty"`
	ProvisioningState            ProvisioningState      `json:"provisioningState,omitempty"`
	PoolAllocationMode           PoolAllocationMode     `json:"poolAllocationMode,omitempty"`
	KeyVaultReference            *KeyVaultReference     `json:"keyVaultReference,omitempty"`
	AutoStorage                  *AutoStorageProperties `json:"autoStorage,omitempty"`
	DedicatedCoreQuota           *int32                 `json:"dedicatedCoreQuota,omitempty"`
	LowPriorityCoreQuota         *int32                 `json:"lowPriorityCoreQuota,omitempty"`
	PoolQuota                    *int32                 `json:"poolQuota,omitempty"`
	ActiveJobAndJobScheduleQuota *int32                 `json:"activeJobAndJobScheduleQuota,omitempty"`
}

// AccountRegenerateKeyParameters is parameters supplied to the RegenerateKey operation.
type AccountRegenerateKeyParameters struct {
	KeyName AccountKeyType `json:"keyName,omitempty"`
}

// AccountUpdateParameters is parameters for updating an Azure Batch account.
type AccountUpdateParameters struct {
	Tags                     *map[string]*string `json:"tags,omitempty"`
	*AccountUpdateProperties `json:"properties,omitempty"`
}

// AccountUpdateProperties is the properties of a Batch account.
type AccountUpdateProperties struct {
	AutoStorage *AutoStorageBaseProperties `json:"autoStorage,omitempty"`
}

// ActivateApplicationPackageParameters is parameters for an activating an application package.
type ActivateApplicationPackageParameters struct {
	Format *string `json:"format,omitempty"`
}

// Application is contains information about an application in a Batch account.
type Application struct {
	autorest.Response `json:"-"`
	ID                *string               `json:"id,omitempty"`
	DisplayName       *string               `json:"displayName,omitempty"`
	Packages          *[]ApplicationPackage `json:"packages,omitempty"`
	AllowUpdates      *bool                 `json:"allowUpdates,omitempty"`
	DefaultVersion    *string               `json:"defaultVersion,omitempty"`
}

// ApplicationCreateParameters is parameters for adding an Application.
type ApplicationCreateParameters struct {
	AllowUpdates *bool   `json:"allowUpdates,omitempty"`
	DisplayName  *string `json:"displayName,omitempty"`
}

// ApplicationPackage is an application package which represents a particular version of an application.
type ApplicationPackage struct {
	autorest.Response  `json:"-"`
	ID                 *string      `json:"id,omitempty"`
	Version            *string      `json:"version,omitempty"`
	State              PackageState `json:"state,omitempty"`
	Format             *string      `json:"format,omitempty"`
	StorageURL         *string      `json:"storageUrl,omitempty"`
	StorageURLExpiry   *date.Time   `json:"storageUrlExpiry,omitempty"`
	LastActivationTime *date.Time   `json:"lastActivationTime,omitempty"`
}

// ApplicationPackageReference is
type ApplicationPackageReference struct {
	ID      *string `json:"id,omitempty"`
	Version *string `json:"version,omitempty"`
}

// ApplicationUpdateParameters is parameters for an update application request.
type ApplicationUpdateParameters struct {
	AllowUpdates   *bool   `json:"allowUpdates,omitempty"`
	DefaultVersion *string `json:"defaultVersion,omitempty"`
	DisplayName    *string `json:"displayName,omitempty"`
}

// AutoScaleRun is
type AutoScaleRun struct {
	EvaluationTime *date.Time         `json:"evaluationTime,omitempty"`
	Results        *string            `json:"results,omitempty"`
	Error          *AutoScaleRunError `json:"error,omitempty"`
}

// AutoScaleRunError is
type AutoScaleRunError struct {
	Code    *string              `json:"code,omitempty"`
	Message *string              `json:"message,omitempty"`
	Details *[]AutoScaleRunError `json:"details,omitempty"`
}

// AutoScaleSettings is
type AutoScaleSettings struct {
	Formula            *string `json:"formula,omitempty"`
	EvaluationInterval *string `json:"evaluationInterval,omitempty"`
}

// AutoStorageBaseProperties is the properties related to the auto-storage account.
type AutoStorageBaseProperties struct {
	StorageAccountID *string `json:"storageAccountId,omitempty"`
}

// AutoStorageProperties is contains information about the auto-storage account associated with a Batch account.
type AutoStorageProperties struct {
	StorageAccountID *string    `json:"storageAccountId,omitempty"`
	LastKeySync      *date.Time `json:"lastKeySync,omitempty"`
}

// AutoUserSpecification is
type AutoUserSpecification struct {
	Scope          AutoUserScope  `json:"scope,omitempty"`
	ElevationLevel ElevationLevel `json:"elevationLevel,omitempty"`
}

// Certificate is contains information about a certificate.
type Certificate struct {
	autorest.Response      `json:"-"`
	ID                     *string `json:"id,omitempty"`
	Name                   *string `json:"name,omitempty"`
	Type                   *string `json:"type,omitempty"`
	Etag                   *string `json:"etag,omitempty"`
	*CertificateProperties `json:"properties,omitempty"`
}

// CertificateBaseProperties is
type CertificateBaseProperties struct {
	ThumbprintAlgorithm *string           `json:"thumbprintAlgorithm,omitempty"`
	Thumbprint          *string           `json:"thumbprint,omitempty"`
	Format              CertificateFormat `json:"format,omitempty"`
}

// CertificateCreateOrUpdateParameters is contains information about a certificate.
type CertificateCreateOrUpdateParameters struct {
	ID                                   *string `json:"id,omitempty"`
	Name                                 *string `json:"name,omitempty"`
	Type                                 *string `json:"type,omitempty"`
	Etag                                 *string `json:"etag,omitempty"`
	*CertificateCreateOrUpdateProperties `json:"properties,omitempty"`
}

// CertificateCreateOrUpdateProperties is certificate properties for create operations
type CertificateCreateOrUpdateProperties struct {
	ThumbprintAlgorithm *string           `json:"thumbprintAlgorithm,omitempty"`
	Thumbprint          *string           `json:"thumbprint,omitempty"`
	Format              CertificateFormat `json:"format,omitempty"`
	Data                *string           `json:"data,omitempty"`
	Password            *string           `json:"password,omitempty"`
}

// CertificateProperties is certificate properties.
type CertificateProperties struct {
	ThumbprintAlgorithm                     *string                      `json:"thumbprintAlgorithm,omitempty"`
	Thumbprint                              *string                      `json:"thumbprint,omitempty"`
	Format                                  CertificateFormat            `json:"format,omitempty"`
	ProvisioningState                       CertificateProvisioningState `json:"provisioningState,omitempty"`
	ProvisioningStateTransitionTime         *date.Time                   `json:"provisioningStateTransitionTime,omitempty"`
	PreviousProvisioningState               CertificateProvisioningState `json:"previousProvisioningState,omitempty"`
	PreviousProvisioningStateTransitionTime *date.Time                   `json:"previousProvisioningStateTransitionTime,omitempty"`
	PublicData                              *string                      `json:"publicData,omitempty"`
	DeleteCertificateError                  *DeleteCertificateError      `json:"deleteCertificateError,omitempty"`
}

// CertificateReference is
type CertificateReference struct {
	ID            *string                  `json:"id,omitempty"`
	StoreLocation CertificateStoreLocation `json:"storeLocation,omitempty"`
	StoreName     *string                  `json:"storeName,omitempty"`
	Visibility    *[]CertificateVisibility `json:"visibility,omitempty"`
}

// CheckNameAvailabilityParameters is parameters for a check name availability request.
type CheckNameAvailabilityParameters struct {
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
}

// CheckNameAvailabilityResult is the CheckNameAvailability operation response.
type CheckNameAvailabilityResult struct {
	autorest.Response `json:"-"`
	NameAvailable     *bool                  `json:"nameAvailable,omitempty"`
	Reason            NameAvailabilityReason `json:"reason,omitempty"`
	Message           *string                `json:"message,omitempty"`
}

// CloudError is an error response from the Batch service.
type CloudError struct {
	Error *CloudErrorBody `json:"error,omitempty"`
}

// CloudErrorBody is an error response from the Batch service.
type CloudErrorBody struct {
	Code    *string           `json:"code,omitempty"`
	Message *string           `json:"message,omitempty"`
	Target  *string           `json:"target,omitempty"`
	Details *[]CloudErrorBody `json:"details,omitempty"`
}

// CloudServiceConfiguration is
type CloudServiceConfiguration struct {
	OsFamily         *string `json:"osFamily,omitempty"`
	TargetOSVersion  *string `json:"targetOSVersion,omitempty"`
	CurrentOSVersion *string `json:"currentOSVersion,omitempty"`
}

// DataDisk is data Disk settings which will be used by the data disks associated to Compute Nodes in the pool.
type DataDisk struct {
	Lun                *int32             `json:"lun,omitempty"`
	Caching            CachingType        `json:"caching,omitempty"`
	DiskSizeGB         *int32             `json:"diskSizeGB,omitempty"`
	StorageAccountType StorageAccountType `json:"storageAccountType,omitempty"`
}

// DeleteCertificateError is an error response from the Batch service.
type DeleteCertificateError struct {
	Code    *string                   `json:"code,omitempty"`
	Message *string                   `json:"message,omitempty"`
	Target  *string                   `json:"target,omitempty"`
	Details *[]DeleteCertificateError `json:"details,omitempty"`
}

// DeploymentConfiguration is
type DeploymentConfiguration struct {
	CloudServiceConfiguration   *CloudServiceConfiguration   `json:"cloudServiceConfiguration,omitempty"`
	VirtualMachineConfiguration *VirtualMachineConfiguration `json:"virtualMachineConfiguration,omitempty"`
}

// EnvironmentSetting is
type EnvironmentSetting struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// FixedScaleSettings is
type FixedScaleSettings struct {
	ResizeTimeout          *string                       `json:"resizeTimeout,omitempty"`
	TargetDedicatedNodes   *int32                        `json:"targetDedicatedNodes,omitempty"`
	TargetLowPriorityNodes *int32                        `json:"targetLowPriorityNodes,omitempty"`
	NodeDeallocationOption ComputeNodeDeallocationOption `json:"nodeDeallocationOption,omitempty"`
}

// ImageReference is
type ImageReference struct {
	Publisher *string `json:"publisher,omitempty"`
	Offer     *string `json:"offer,omitempty"`
	Sku       *string `json:"sku,omitempty"`
	Version   *string `json:"version,omitempty"`
	ID        *string `json:"id,omitempty"`
}

// InboundNatPool is
type InboundNatPool struct {
	Name                      *string                     `json:"name,omitempty"`
	Protocol                  InboundEndpointProtocol     `json:"protocol,omitempty"`
	BackendPort               *int32                      `json:"backendPort,omitempty"`
	FrontendPortRangeStart    *int32                      `json:"frontendPortRangeStart,omitempty"`
	FrontendPortRangeEnd      *int32                      `json:"frontendPortRangeEnd,omitempty"`
	NetworkSecurityGroupRules *[]NetworkSecurityGroupRule `json:"networkSecurityGroupRules,omitempty"`
}

// KeyVaultReference is identifies the Azure key vault associated with a Batch account.
type KeyVaultReference struct {
	ID  *string `json:"id,omitempty"`
	URL *string `json:"url,omitempty"`
}

// LinuxUserConfiguration is
type LinuxUserConfiguration struct {
	UID           *int32  `json:"uid,omitempty"`
	Gid           *int32  `json:"gid,omitempty"`
	SSHPrivateKey *string `json:"sshPrivateKey,omitempty"`
}

// ListApplicationsResult is the result of performing list applications.
type ListApplicationsResult struct {
	autorest.Response `json:"-"`
	Value             *[]Application `json:"value,omitempty"`
	NextLink          *string        `json:"nextLink,omitempty"`
}

// ListApplicationsResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client ListApplicationsResult) ListApplicationsResultPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// ListCertificatesResult is values returned by the List operation.
type ListCertificatesResult struct {
	autorest.Response `json:"-"`
	Value             *[]Certificate `json:"value,omitempty"`
	NextLink          *string        `json:"nextLink,omitempty"`
}

// ListCertificatesResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client ListCertificatesResult) ListCertificatesResultPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// ListPoolsResult is values returned by the List operation.
type ListPoolsResult struct {
	autorest.Response `json:"-"`
	Value             *[]Pool `json:"value,omitempty"`
	NextLink          *string `json:"nextLink,omitempty"`
}

// ListPoolsResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client ListPoolsResult) ListPoolsResultPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// LocationQuota is quotas associated with a Batch region for a particular subscription.
type LocationQuota struct {
	autorest.Response `json:"-"`
	AccountQuota      *int32 `json:"accountQuota,omitempty"`
}

// MetadataItem is the Batch service does not assign any meaning to this metadata; it is solely for the use of user
// code.
type MetadataItem struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// NetworkConfiguration is the network configuration for a pool.
type NetworkConfiguration struct {
	SubnetID              *string                    `json:"subnetId,omitempty"`
	EndpointConfiguration *PoolEndpointConfiguration `json:"endpointConfiguration,omitempty"`
}

// NetworkSecurityGroupRule is
type NetworkSecurityGroupRule struct {
	Priority            *int32                         `json:"priority,omitempty"`
	Access              NetworkSecurityGroupRuleAccess `json:"access,omitempty"`
	SourceAddressPrefix *string                        `json:"sourceAddressPrefix,omitempty"`
}

// Operation is
type Operation struct {
	Name       *string                 `json:"name,omitempty"`
	Display    *OperationDisplay       `json:"display,omitempty"`
	Origin     *string                 `json:"origin,omitempty"`
	Properties *map[string]interface{} `json:"properties,omitempty"`
}

// OperationDisplay is
type OperationDisplay struct {
	Provider    *string `json:"provider,omitempty"`
	Operation   *string `json:"operation,omitempty"`
	Resource    *string `json:"resource,omitempty"`
	Description *string `json:"description,omitempty"`
}

// OperationListResult is
type OperationListResult struct {
	autorest.Response `json:"-"`
	Value             *[]Operation `json:"value,omitempty"`
	NextLink          *string      `json:"nextLink,omitempty"`
}

// OperationListResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client OperationListResult) OperationListResultPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// OSDisk is
type OSDisk struct {
	Caching CachingType `json:"caching,omitempty"`
}

// Pool is contains information about a pool.
type Pool struct {
	autorest.Response `json:"-"`
	ID                *string `json:"id,omitempty"`
	Name              *string `json:"name,omitempty"`
	Type              *string `json:"type,omitempty"`
	Etag              *string `json:"etag,omitempty"`
	*PoolProperties   `json:"properties,omitempty"`
}

// PoolEndpointConfiguration is
type PoolEndpointConfiguration struct {
	InboundNatPools *[]InboundNatPool `json:"inboundNatPools,omitempty"`
}

// PoolProperties is pool properties.
type PoolProperties struct {
	DisplayName                     *string                        `json:"displayName,omitempty"`
	LastModified                    *date.Time                     `json:"lastModified,omitempty"`
	CreationTime                    *date.Time                     `json:"creationTime,omitempty"`
	ProvisioningState               PoolProvisioningState          `json:"provisioningState,omitempty"`
	ProvisioningStateTransitionTime *date.Time                     `json:"provisioningStateTransitionTime,omitempty"`
	AllocationState                 AllocationState                `json:"allocationState,omitempty"`
	AllocationStateTransitionTime   *date.Time                     `json:"allocationStateTransitionTime,omitempty"`
	VMSize                          *string                        `json:"vmSize,omitempty"`
	DeploymentConfiguration         *DeploymentConfiguration       `json:"deploymentConfiguration,omitempty"`
	CurrentDedicatedNodes           *int32                         `json:"currentDedicatedNodes,omitempty"`
	CurrentLowPriorityNodes         *int32                         `json:"currentLowPriorityNodes,omitempty"`
	ScaleSettings                   *ScaleSettings                 `json:"scaleSettings,omitempty"`
	AutoScaleRun                    *AutoScaleRun                  `json:"autoScaleRun,omitempty"`
	InterNodeCommunication          InterNodeCommunicationState    `json:"interNodeCommunication,omitempty"`
	NetworkConfiguration            *NetworkConfiguration          `json:"networkConfiguration,omitempty"`
	MaxTasksPerNode                 *int32                         `json:"maxTasksPerNode,omitempty"`
	TaskSchedulingPolicy            *TaskSchedulingPolicy          `json:"taskSchedulingPolicy,omitempty"`
	UserAccounts                    *[]UserAccount                 `json:"userAccounts,omitempty"`
	Metadata                        *[]MetadataItem                `json:"metadata,omitempty"`
	StartTask                       *StartTask                     `json:"startTask,omitempty"`
	Certificates                    *[]CertificateReference        `json:"certificates,omitempty"`
	ApplicationPackages             *[]ApplicationPackageReference `json:"applicationPackages,omitempty"`
	ApplicationLicenses             *[]string                      `json:"applicationLicenses,omitempty"`
	ResizeOperationStatus           *ResizeOperationStatus         `json:"resizeOperationStatus,omitempty"`
}

// ProxyResource is a definition of an Azure resource.
type ProxyResource struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	Etag *string `json:"etag,omitempty"`
}

// ResizeError is
type ResizeError struct {
	Code    *string        `json:"code,omitempty"`
	Message *string        `json:"message,omitempty"`
	Details *[]ResizeError `json:"details,omitempty"`
}

// ResizeOperationStatus is describes either the current operation (if the pool AllocationState is Resizing) or the
// previously completed operation (if the AllocationState is Steady).
type ResizeOperationStatus struct {
	TargetDedicatedNodes   *int32                        `json:"targetDedicatedNodes,omitempty"`
	TargetLowPriorityNodes *int32                        `json:"targetLowPriorityNodes,omitempty"`
	ResizeTimeout          *string                       `json:"resizeTimeout,omitempty"`
	NodeDeallocationOption ComputeNodeDeallocationOption `json:"nodeDeallocationOption,omitempty"`
	StartTime              *date.Time                    `json:"startTime,omitempty"`
	Errors                 *[]ResizeError                `json:"errors,omitempty"`
}

// Resource is a definition of an Azure resource.
type Resource struct {
	ID       *string             `json:"id,omitempty"`
	Name     *string             `json:"name,omitempty"`
	Type     *string             `json:"type,omitempty"`
	Location *string             `json:"location,omitempty"`
	Tags     *map[string]*string `json:"tags,omitempty"`
}

// ResourceFile is
type ResourceFile struct {
	BlobSource *string `json:"blobSource,omitempty"`
	FilePath   *string `json:"filePath,omitempty"`
	FileMode   *string `json:"fileMode,omitempty"`
}

// ScaleSettings is defines the desired size of the pool. This can either be 'fixedScale' where the requested
// targetDedicatedNodes is specified, or 'autoScale' which defines a formula which is periodically reevaluated. If this
// property is not specified, the pool will have a fixed scale with 0 targetDedicatedNodes.
type ScaleSettings struct {
	FixedScale *FixedScaleSettings `json:"fixedScale,omitempty"`
	AutoScale  *AutoScaleSettings  `json:"autoScale,omitempty"`
}

// StartTask is
type StartTask struct {
	CommandLine         *string               `json:"commandLine,omitempty"`
	ResourceFiles       *[]ResourceFile       `json:"resourceFiles,omitempty"`
	EnvironmentSettings *[]EnvironmentSetting `json:"environmentSettings,omitempty"`
	UserIdentity        *UserIdentity         `json:"userIdentity,omitempty"`
	MaxTaskRetryCount   *int32                `json:"maxTaskRetryCount,omitempty"`
	WaitForSuccess      *bool                 `json:"waitForSuccess,omitempty"`
}

// TaskSchedulingPolicy is
type TaskSchedulingPolicy struct {
	NodeFillType ComputeNodeFillType `json:"nodeFillType,omitempty"`
}

// UserAccount is
type UserAccount struct {
	Name                   *string                 `json:"name,omitempty"`
	Password               *string                 `json:"password,omitempty"`
	ElevationLevel         ElevationLevel          `json:"elevationLevel,omitempty"`
	LinuxUserConfiguration *LinuxUserConfiguration `json:"linuxUserConfiguration,omitempty"`
}

// UserIdentity is specify either the userName or autoUser property, but not both.
type UserIdentity struct {
	UserName *string                `json:"userName,omitempty"`
	AutoUser *AutoUserSpecification `json:"autoUser,omitempty"`
}

// VirtualMachineConfiguration is
type VirtualMachineConfiguration struct {
	ImageReference       *ImageReference       `json:"imageReference,omitempty"`
	OsDisk               *OSDisk               `json:"osDisk,omitempty"`
	NodeAgentSkuID       *string               `json:"nodeAgentSkuId,omitempty"`
	WindowsConfiguration *WindowsConfiguration `json:"windowsConfiguration,omitempty"`
	DataDisks            *[]DataDisk           `json:"dataDisks,omitempty"`
	LicenseType          *string               `json:"licenseType,omitempty"`
}

// WindowsConfiguration is
type WindowsConfiguration struct {
	EnableAutomaticUpdates *bool `json:"enableAutomaticUpdates,omitempty"`
}
