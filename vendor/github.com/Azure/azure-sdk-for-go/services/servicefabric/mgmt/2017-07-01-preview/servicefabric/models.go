package servicefabric

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/json"
	"errors"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/Azure/go-autorest/autorest/to"
	"net/http"
)

// ClusterState enumerates the values for cluster state.
type ClusterState string

const (
	// AutoScale specifies the auto scale state for cluster state.
	AutoScale ClusterState = "AutoScale"
	// BaselineUpgrade specifies the baseline upgrade state for cluster state.
	BaselineUpgrade ClusterState = "BaselineUpgrade"
	// Deploying specifies the deploying state for cluster state.
	Deploying ClusterState = "Deploying"
	// EnforcingClusterVersion specifies the enforcing cluster version state for cluster state.
	EnforcingClusterVersion ClusterState = "EnforcingClusterVersion"
	// Ready specifies the ready state for cluster state.
	Ready ClusterState = "Ready"
	// UpdatingInfrastructure specifies the updating infrastructure state for cluster state.
	UpdatingInfrastructure ClusterState = "UpdatingInfrastructure"
	// UpdatingUserCertificate specifies the updating user certificate state for cluster state.
	UpdatingUserCertificate ClusterState = "UpdatingUserCertificate"
	// UpdatingUserConfiguration specifies the updating user configuration state for cluster state.
	UpdatingUserConfiguration ClusterState = "UpdatingUserConfiguration"
	// UpgradeServiceUnreachable specifies the upgrade service unreachable state for cluster state.
	UpgradeServiceUnreachable ClusterState = "UpgradeServiceUnreachable"
	// WaitingForNodes specifies the waiting for nodes state for cluster state.
	WaitingForNodes ClusterState = "WaitingForNodes"
)

// DefaultMoveCost enumerates the values for default move cost.
type DefaultMoveCost string

const (
	// High specifies the high state for default move cost.
	High DefaultMoveCost = "High"
	// Low specifies the low state for default move cost.
	Low DefaultMoveCost = "Low"
	// Medium specifies the medium state for default move cost.
	Medium DefaultMoveCost = "Medium"
	// Zero specifies the zero state for default move cost.
	Zero DefaultMoveCost = "Zero"
)

// DurabilityLevel enumerates the values for durability level.
type DurabilityLevel string

const (
	// Bronze specifies the bronze state for durability level.
	Bronze DurabilityLevel = "Bronze"
	// Gold specifies the gold state for durability level.
	Gold DurabilityLevel = "Gold"
	// Silver specifies the silver state for durability level.
	Silver DurabilityLevel = "Silver"
)

// Environment enumerates the values for environment.
type Environment string

const (
	// Linux specifies the linux state for environment.
	Linux Environment = "Linux"
	// Windows specifies the windows state for environment.
	Windows Environment = "Windows"
)

// PartitionScheme enumerates the values for partition scheme.
type PartitionScheme string

const (
	// PartitionSchemeNamed specifies the partition scheme named state for partition scheme.
	PartitionSchemeNamed PartitionScheme = "Named"
	// PartitionSchemeSingleton specifies the partition scheme singleton state for partition scheme.
	PartitionSchemeSingleton PartitionScheme = "Singleton"
	// PartitionSchemeUniformInt64Range specifies the partition scheme uniform int 64 range state for partition scheme.
	PartitionSchemeUniformInt64Range PartitionScheme = "UniformInt64Range"
)

// ProvisioningState enumerates the values for provisioning state.
type ProvisioningState string

const (
	// Canceled specifies the canceled state for provisioning state.
	Canceled ProvisioningState = "Canceled"
	// Failed specifies the failed state for provisioning state.
	Failed ProvisioningState = "Failed"
	// Succeeded specifies the succeeded state for provisioning state.
	Succeeded ProvisioningState = "Succeeded"
	// Updating specifies the updating state for provisioning state.
	Updating ProvisioningState = "Updating"
)

// ReliabilityLevel enumerates the values for reliability level.
type ReliabilityLevel string

const (
	// ReliabilityLevelBronze specifies the reliability level bronze state for reliability level.
	ReliabilityLevelBronze ReliabilityLevel = "Bronze"
	// ReliabilityLevelGold specifies the reliability level gold state for reliability level.
	ReliabilityLevelGold ReliabilityLevel = "Gold"
	// ReliabilityLevelNone specifies the reliability level none state for reliability level.
	ReliabilityLevelNone ReliabilityLevel = "None"
	// ReliabilityLevelPlatinum specifies the reliability level platinum state for reliability level.
	ReliabilityLevelPlatinum ReliabilityLevel = "Platinum"
	// ReliabilityLevelSilver specifies the reliability level silver state for reliability level.
	ReliabilityLevelSilver ReliabilityLevel = "Silver"
)

// ReliabilityLevel1 enumerates the values for reliability level 1.
type ReliabilityLevel1 string

const (
	// ReliabilityLevel1Bronze specifies the reliability level 1 bronze state for reliability level 1.
	ReliabilityLevel1Bronze ReliabilityLevel1 = "Bronze"
	// ReliabilityLevel1Gold specifies the reliability level 1 gold state for reliability level 1.
	ReliabilityLevel1Gold ReliabilityLevel1 = "Gold"
	// ReliabilityLevel1Silver specifies the reliability level 1 silver state for reliability level 1.
	ReliabilityLevel1Silver ReliabilityLevel1 = "Silver"
)

// Scheme enumerates the values for scheme.
type Scheme string

const (
	// Affinity specifies the affinity state for scheme.
	Affinity Scheme = "Affinity"
	// AlignedAffinity specifies the aligned affinity state for scheme.
	AlignedAffinity Scheme = "AlignedAffinity"
	// Invalid specifies the invalid state for scheme.
	Invalid Scheme = "Invalid"
	// NonAlignedAffinity specifies the non aligned affinity state for scheme.
	NonAlignedAffinity Scheme = "NonAlignedAffinity"
)

// ServiceKind enumerates the values for service kind.
type ServiceKind string

const (
	// ServiceKindInvalid specifies the service kind invalid state for service kind.
	ServiceKindInvalid ServiceKind = "Invalid"
	// ServiceKindStateful specifies the service kind stateful state for service kind.
	ServiceKindStateful ServiceKind = "Stateful"
	// ServiceKindStateless specifies the service kind stateless state for service kind.
	ServiceKindStateless ServiceKind = "Stateless"
)

// ServiceResourceType enumerates the values for service resource type.
type ServiceResourceType string

const (
	// ServiceResourceTypeStatefulService specifies the service resource type stateful service state for service resource
	// type.
	ServiceResourceTypeStatefulService ServiceResourceType = "StatefulService"
	// ServiceResourceTypeStatelessService specifies the service resource type stateless service state for service resource
	// type.
	ServiceResourceTypeStatelessService ServiceResourceType = "StatelessService"
)

// ServiceResourceTypeServiceUpdateProperties enumerates the values for service resource type service update
// properties.
type ServiceResourceTypeServiceUpdateProperties string

const (
	// ServiceResourceTypeStatefulServiceUpdate specifies the service resource type stateful service update state for
	// service resource type service update properties.
	ServiceResourceTypeStatefulServiceUpdate ServiceResourceTypeServiceUpdateProperties = "StatefulServiceUpdate"
	// ServiceResourceTypeStatelessServiceUpdate specifies the service resource type stateless service update state for
	// service resource type service update properties.
	ServiceResourceTypeStatelessServiceUpdate ServiceResourceTypeServiceUpdateProperties = "StatelessServiceUpdate"
)

// Type enumerates the values for type.
type Type string

// UpgradeMode enumerates the values for upgrade mode.
type UpgradeMode string

const (
	// Automatic specifies the automatic state for upgrade mode.
	Automatic UpgradeMode = "Automatic"
	// Manual specifies the manual state for upgrade mode.
	Manual UpgradeMode = "Manual"
)

// UpgradeMode1 enumerates the values for upgrade mode 1.
type UpgradeMode1 string

const (
	// UpgradeMode1Automatic specifies the upgrade mode 1 automatic state for upgrade mode 1.
	UpgradeMode1Automatic UpgradeMode1 = "Automatic"
	// UpgradeMode1Manual specifies the upgrade mode 1 manual state for upgrade mode 1.
	UpgradeMode1Manual UpgradeMode1 = "Manual"
)

// Weight enumerates the values for weight.
type Weight string

const (
	// WeightHigh specifies the weight high state for weight.
	WeightHigh Weight = "High"
	// WeightLow specifies the weight low state for weight.
	WeightLow Weight = "Low"
	// WeightMedium specifies the weight medium state for weight.
	WeightMedium Weight = "Medium"
	// WeightZero specifies the weight zero state for weight.
	WeightZero Weight = "Zero"
)

// X509StoreName enumerates the values for x509 store name.
type X509StoreName string

const (
	// AddressBook specifies the address book state for x509 store name.
	AddressBook X509StoreName = "AddressBook"
	// AuthRoot specifies the auth root state for x509 store name.
	AuthRoot X509StoreName = "AuthRoot"
	// CertificateAuthority specifies the certificate authority state for x509 store name.
	CertificateAuthority X509StoreName = "CertificateAuthority"
	// Disallowed specifies the disallowed state for x509 store name.
	Disallowed X509StoreName = "Disallowed"
	// My specifies the my state for x509 store name.
	My X509StoreName = "My"
	// Root specifies the root state for x509 store name.
	Root X509StoreName = "Root"
	// TrustedPeople specifies the trusted people state for x509 store name.
	TrustedPeople X509StoreName = "TrustedPeople"
	// TrustedPublisher specifies the trusted publisher state for x509 store name.
	TrustedPublisher X509StoreName = "TrustedPublisher"
)

// ApplicationHealthPolicy is defines a health policy used to evaluate the health of an application or one of its
// children entities.
type ApplicationHealthPolicy struct {
	ConsiderWarningAsError                  *bool                             `json:"ConsiderWarningAsError,omitempty"`
	MaxPercentUnhealthyDeployedApplications *int32                            `json:"MaxPercentUnhealthyDeployedApplications,omitempty"`
	DefaultServiceTypeHealthPolicy          *ServiceTypeHealthPolicy          `json:"DefaultServiceTypeHealthPolicy,omitempty"`
	ServiceTypeHealthPolicyMap              *[]ServiceTypeHealthPolicyMapItem `json:"ServiceTypeHealthPolicyMap,omitempty"`
}

// ApplicationMetricDescription is describes capacity information for a custom resource balancing metric. This can be
// used to limit the total consumption of this metric by the services of this application.
type ApplicationMetricDescription struct {
	Name                     *string `json:"Name,omitempty"`
	MaximumCapacity          *int64  `json:"MaximumCapacity,omitempty"`
	ReservationCapacity      *int64  `json:"ReservationCapacity,omitempty"`
	TotalApplicationCapacity *int64  `json:"TotalApplicationCapacity,omitempty"`
}

// ApplicationParameter is describes an application parameter override to be applied when creating or upgrading an
// application.
type ApplicationParameter struct {
	Key   *string `json:"Key,omitempty"`
	Value *string `json:"Value,omitempty"`
}

// ApplicationProperties is the application resource properties.
type ApplicationProperties struct {
	TypeVersion               *string                         `json:"typeVersion,omitempty"`
	Parameters                *[]ApplicationParameter         `json:"parameters,omitempty"`
	UpgradePolicy             *ApplicationUpgradePolicy       `json:"upgradePolicy,omitempty"`
	MinimumNodes              *int64                          `json:"minimumNodes,omitempty"`
	MaximumNodes              *int64                          `json:"maximumNodes,omitempty"`
	RemoveApplicationCapacity *bool                           `json:"removeApplicationCapacity,omitempty"`
	Metrics                   *[]ApplicationMetricDescription `json:"metrics,omitempty"`
	ProvisioningState         *string                         `json:"provisioningState,omitempty"`
	TypeName                  *string                         `json:"typeName,omitempty"`
}

// ApplicationResource is the application resource.
type ApplicationResource struct {
	autorest.Response      `json:"-"`
	ID                     *string `json:"id,omitempty"`
	Name                   *string `json:"name,omitempty"`
	Type                   *string `json:"type,omitempty"`
	Location               *string `json:"location,omitempty"`
	*ApplicationProperties `json:"properties,omitempty"`
}

// ApplicationResourceList is the list of application resources.
type ApplicationResourceList struct {
	autorest.Response `json:"-"`
	Value             *[]ApplicationResource `json:"value,omitempty"`
}

// ApplicationResourceUpdate is the application resource for patch operations.
type ApplicationResourceUpdate struct {
	autorest.Response            `json:"-"`
	ID                           *string `json:"id,omitempty"`
	Name                         *string `json:"name,omitempty"`
	Type                         *string `json:"type,omitempty"`
	Location                     *string `json:"location,omitempty"`
	*ApplicationUpdateProperties `json:"properties,omitempty"`
}

// ApplicationTypeProperties is the application type name properties
type ApplicationTypeProperties struct {
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// ApplicationTypeResource is the application type name resource
type ApplicationTypeResource struct {
	autorest.Response          `json:"-"`
	ID                         *string `json:"id,omitempty"`
	Name                       *string `json:"name,omitempty"`
	Type                       *string `json:"type,omitempty"`
	Location                   *string `json:"location,omitempty"`
	*ApplicationTypeProperties `json:"properties,omitempty"`
}

// ApplicationTypeResourceList is the list of application type names.
type ApplicationTypeResourceList struct {
	autorest.Response `json:"-"`
	Value             *[]ApplicationTypeResource `json:"value,omitempty"`
}

// ApplicationUpdateProperties is the application resource properties for patch operations.
type ApplicationUpdateProperties struct {
	TypeVersion               *string                         `json:"typeVersion,omitempty"`
	Parameters                *[]ApplicationParameter         `json:"parameters,omitempty"`
	UpgradePolicy             *ApplicationUpgradePolicy       `json:"upgradePolicy,omitempty"`
	MinimumNodes              *int64                          `json:"minimumNodes,omitempty"`
	MaximumNodes              *int64                          `json:"maximumNodes,omitempty"`
	RemoveApplicationCapacity *bool                           `json:"removeApplicationCapacity,omitempty"`
	Metrics                   *[]ApplicationMetricDescription `json:"metrics,omitempty"`
}

// ApplicationUpgradePolicy is the application upgrade policy.
type ApplicationUpgradePolicy struct {
	UpgradeReplicaSetCheckTimeout  *int64                          `json:"upgradeReplicaSetCheckTimeout,omitempty"`
	ForceRestart                   *bool                           `json:"forceRestart,omitempty"`
	RollingUpgradeMonitoringPolicy *RollingUpgradeMonitoringPolicy `json:"rollingUpgradeMonitoringPolicy,omitempty"`
	ApplicationHealthPolicy        *ApplicationHealthPolicy        `json:"applicationHealthPolicy,omitempty"`
}

// AvailableOperationDisplay is operation supported by Service Fabric resource provider
type AvailableOperationDisplay struct {
	Provider    *string `json:"provider,omitempty"`
	Resource    *string `json:"resource,omitempty"`
	Operation   *string `json:"operation,omitempty"`
	Description *string `json:"description,omitempty"`
}

// AzureActiveDirectory is the settings to enable AAD authentication on the cluster.
type AzureActiveDirectory struct {
	TenantID           *string `json:"tenantId,omitempty"`
	ClusterApplication *string `json:"clusterApplication,omitempty"`
	ClientApplication  *string `json:"clientApplication,omitempty"`
}

// CertificateDescription is describes the certificate details.
type CertificateDescription struct {
	Thumbprint          *string       `json:"thumbprint,omitempty"`
	ThumbprintSecondary *string       `json:"thumbprintSecondary,omitempty"`
	X509StoreName       X509StoreName `json:"x509StoreName,omitempty"`
}

// ClientCertificateCommonName is describes the client certificate details using common name.
type ClientCertificateCommonName struct {
	IsAdmin                     *bool   `json:"isAdmin,omitempty"`
	CertificateCommonName       *string `json:"certificateCommonName,omitempty"`
	CertificateIssuerThumbprint *string `json:"certificateIssuerThumbprint,omitempty"`
}

// ClientCertificateThumbprint is describes the client certificate details using thumbprint.
type ClientCertificateThumbprint struct {
	IsAdmin               *bool   `json:"isAdmin,omitempty"`
	CertificateThumbprint *string `json:"certificateThumbprint,omitempty"`
}

// Cluster is the cluster resource
type Cluster struct {
	autorest.Response  `json:"-"`
	ID                 *string             `json:"id,omitempty"`
	Name               *string             `json:"name,omitempty"`
	Type               *string             `json:"type,omitempty"`
	Location           *string             `json:"location,omitempty"`
	Tags               *map[string]*string `json:"tags,omitempty"`
	*ClusterProperties `json:"properties,omitempty"`
}

// ClusterCodeVersionsListResult is the list results of the ServiceFabric runtime versions.
type ClusterCodeVersionsListResult struct {
	autorest.Response `json:"-"`
	Value             *[]ClusterCodeVersionsResult `json:"value,omitempty"`
	NextLink          *string                      `json:"nextLink,omitempty"`
}

// ClusterCodeVersionsResult is the result of the ServiceFabric runtime versions
type ClusterCodeVersionsResult struct {
	ID                     *string `json:"id,omitempty"`
	Name                   *string `json:"name,omitempty"`
	Type                   *string `json:"type,omitempty"`
	*ClusterVersionDetails `json:"properties,omitempty"`
}

// ClusterHealthPolicy is defines a health policy used to evaluate the health of the cluster or of a cluster node.
type ClusterHealthPolicy struct {
	MaxPercentUnhealthyNodes        *int32 `json:"maxPercentUnhealthyNodes,omitempty"`
	MaxPercentUnhealthyApplications *int32 `json:"maxPercentUnhealthyApplications,omitempty"`
}

// ClusterListResult is cluster list results
type ClusterListResult struct {
	autorest.Response `json:"-"`
	Value             *[]Cluster `json:"value,omitempty"`
	NextLink          *string    `json:"nextLink,omitempty"`
}

// ClusterProperties is describes the cluster resource properties.
type ClusterProperties struct {
	AvailableClusterVersions        *[]ClusterVersionDetails         `json:"availableClusterVersions,omitempty"`
	ClusterID                       *string                          `json:"clusterId,omitempty"`
	ClusterState                    ClusterState                     `json:"clusterState,omitempty"`
	ClusterEndpoint                 *string                          `json:"clusterEndpoint,omitempty"`
	ClusterCodeVersion              *string                          `json:"clusterCodeVersion,omitempty"`
	Certificate                     *CertificateDescription          `json:"certificate,omitempty"`
	ReliabilityLevel                ReliabilityLevel                 `json:"reliabilityLevel,omitempty"`
	UpgradeMode                     UpgradeMode                      `json:"upgradeMode,omitempty"`
	ClientCertificateThumbprints    *[]ClientCertificateThumbprint   `json:"clientCertificateThumbprints,omitempty"`
	ClientCertificateCommonNames    *[]ClientCertificateCommonName   `json:"clientCertificateCommonNames,omitempty"`
	FabricSettings                  *[]SettingsSectionDescription    `json:"fabricSettings,omitempty"`
	ReverseProxyCertificate         *CertificateDescription          `json:"reverseProxyCertificate,omitempty"`
	ManagementEndpoint              *string                          `json:"managementEndpoint,omitempty"`
	NodeTypes                       *[]NodeTypeDescription           `json:"nodeTypes,omitempty"`
	AzureActiveDirectory            *AzureActiveDirectory            `json:"azureActiveDirectory,omitempty"`
	ProvisioningState               ProvisioningState                `json:"provisioningState,omitempty"`
	VMImage                         *string                          `json:"vmImage,omitempty"`
	DiagnosticsStorageAccountConfig *DiagnosticsStorageAccountConfig `json:"diagnosticsStorageAccountConfig,omitempty"`
	UpgradeDescription              *ClusterUpgradePolicy            `json:"upgradeDescription,omitempty"`
	AddOnFeatures                   *[]string                        `json:"addOnFeatures,omitempty"`
}

// ClusterPropertiesUpdateParameters is describes the cluster resource properties that can be updated during PATCH
// operation.
type ClusterPropertiesUpdateParameters struct {
	ReliabilityLevel             ReliabilityLevel               `json:"reliabilityLevel,omitempty"`
	UpgradeMode                  UpgradeMode                    `json:"upgradeMode,omitempty"`
	ClusterCodeVersion           *string                        `json:"clusterCodeVersion,omitempty"`
	Certificate                  *CertificateDescription        `json:"certificate,omitempty"`
	ClientCertificateThumbprints *[]ClientCertificateThumbprint `json:"clientCertificateThumbprints,omitempty"`
	ClientCertificateCommonNames *[]ClientCertificateCommonName `json:"clientCertificateCommonNames,omitempty"`
	FabricSettings               *[]SettingsSectionDescription  `json:"fabricSettings,omitempty"`
	ReverseProxyCertificate      *CertificateDescription        `json:"reverseProxyCertificate,omitempty"`
	NodeTypes                    *[]NodeTypeDescription         `json:"nodeTypes,omitempty"`
	UpgradeDescription           *ClusterUpgradePolicy          `json:"upgradeDescription,omitempty"`
	AddOnFeatures                *[]string                      `json:"addOnFeatures,omitempty"`
}

// ClusterUpdateParameters is cluster update request
type ClusterUpdateParameters struct {
	*ClusterPropertiesUpdateParameters `json:"properties,omitempty"`
	Tags                               *map[string]*string `json:"tags,omitempty"`
}

// ClusterUpgradeDeltaHealthPolicy is describes the delta health policies for the cluster upgrade.
type ClusterUpgradeDeltaHealthPolicy struct {
	MaxPercentDeltaUnhealthyNodes              *int32 `json:"maxPercentDeltaUnhealthyNodes,omitempty"`
	MaxPercentUpgradeDomainDeltaUnhealthyNodes *int32 `json:"maxPercentUpgradeDomainDeltaUnhealthyNodes,omitempty"`
	MaxPercentDeltaUnhealthyApplications       *int32 `json:"maxPercentDeltaUnhealthyApplications,omitempty"`
}

// ClusterUpgradePolicy is describes the policy used when upgrading the cluster.
type ClusterUpgradePolicy struct {
	ForceRestart                  *bool                            `json:"forceRestart,omitempty"`
	UpgradeReplicaSetCheckTimeout *string                          `json:"upgradeReplicaSetCheckTimeout,omitempty"`
	HealthCheckWaitDuration       *string                          `json:"healthCheckWaitDuration,omitempty"`
	HealthCheckStableDuration     *string                          `json:"healthCheckStableDuration,omitempty"`
	HealthCheckRetryTimeout       *string                          `json:"healthCheckRetryTimeout,omitempty"`
	UpgradeTimeout                *string                          `json:"upgradeTimeout,omitempty"`
	UpgradeDomainTimeout          *string                          `json:"upgradeDomainTimeout,omitempty"`
	HealthPolicy                  *ClusterHealthPolicy             `json:"healthPolicy,omitempty"`
	DeltaHealthPolicy             *ClusterUpgradeDeltaHealthPolicy `json:"deltaHealthPolicy,omitempty"`
}

// ClusterVersionDetails is the detail of the Service Fabric runtime version result
type ClusterVersionDetails struct {
	CodeVersion      *string     `json:"codeVersion,omitempty"`
	SupportExpiryUtc *string     `json:"supportExpiryUtc,omitempty"`
	Environment      Environment `json:"environment,omitempty"`
}

// DiagnosticsStorageAccountConfig is the storage account information for storing Service Fabric diagnostic logs.
type DiagnosticsStorageAccountConfig struct {
	StorageAccountName      *string `json:"storageAccountName,omitempty"`
	ProtectedAccountKeyName *string `json:"protectedAccountKeyName,omitempty"`
	BlobEndpoint            *string `json:"blobEndpoint,omitempty"`
	QueueEndpoint           *string `json:"queueEndpoint,omitempty"`
	TableEndpoint           *string `json:"tableEndpoint,omitempty"`
}

// EndpointRangeDescription is port range details
type EndpointRangeDescription struct {
	StartPort *int32 `json:"startPort,omitempty"`
	EndPort   *int32 `json:"endPort,omitempty"`
}

// ErrorModel is the error details.
type ErrorModel struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// NamedPartitionSchemeDescription is describes the named partition scheme of the service.
type NamedPartitionSchemeDescription struct {
	PartitionScheme PartitionScheme `json:"PartitionScheme,omitempty"`
	Count           *int32          `json:"Count,omitempty"`
	Names           *[]string       `json:"Names,omitempty"`
}

// MarshalJSON is the custom marshaler for NamedPartitionSchemeDescription.
func (npsd NamedPartitionSchemeDescription) MarshalJSON() ([]byte, error) {
	npsd.PartitionScheme = PartitionSchemeNamed
	type Alias NamedPartitionSchemeDescription
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(npsd),
	})
}

// AsNamedPartitionSchemeDescription is the PartitionSchemeDescription implementation for NamedPartitionSchemeDescription.
func (npsd NamedPartitionSchemeDescription) AsNamedPartitionSchemeDescription() (*NamedPartitionSchemeDescription, bool) {
	return &npsd, true
}

// AsSingletonPartitionSchemeDescription is the PartitionSchemeDescription implementation for NamedPartitionSchemeDescription.
func (npsd NamedPartitionSchemeDescription) AsSingletonPartitionSchemeDescription() (*SingletonPartitionSchemeDescription, bool) {
	return nil, false
}

// AsUniformInt64RangePartitionSchemeDescription is the PartitionSchemeDescription implementation for NamedPartitionSchemeDescription.
func (npsd NamedPartitionSchemeDescription) AsUniformInt64RangePartitionSchemeDescription() (*UniformInt64RangePartitionSchemeDescription, bool) {
	return nil, false
}

// NodeTypeDescription is describes a node type in the cluster, each node type represents sub set of nodes in the
// cluster.
type NodeTypeDescription struct {
	Name                         *string                   `json:"name,omitempty"`
	PlacementProperties          *map[string]*string       `json:"placementProperties,omitempty"`
	Capacities                   *map[string]*string       `json:"capacities,omitempty"`
	ClientConnectionEndpointPort *int32                    `json:"clientConnectionEndpointPort,omitempty"`
	HTTPGatewayEndpointPort      *int32                    `json:"httpGatewayEndpointPort,omitempty"`
	DurabilityLevel              DurabilityLevel           `json:"durabilityLevel,omitempty"`
	ApplicationPorts             *EndpointRangeDescription `json:"applicationPorts,omitempty"`
	EphemeralPorts               *EndpointRangeDescription `json:"ephemeralPorts,omitempty"`
	IsPrimary                    *bool                     `json:"isPrimary,omitempty"`
	VMInstanceCount              *int32                    `json:"vmInstanceCount,omitempty"`
	ReverseProxyEndpointPort     *int32                    `json:"reverseProxyEndpointPort,omitempty"`
}

// OperationListResult is describes the result of the request to list Service Fabric operations.
type OperationListResult struct {
	autorest.Response `json:"-"`
	Value             *[]OperationResult `json:"value,omitempty"`
	NextLink          *string            `json:"nextLink,omitempty"`
}

// OperationListResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client OperationListResult) OperationListResultPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// OperationResult is available operation list result
type OperationResult struct {
	Name     *string                    `json:"name,omitempty"`
	Display  *AvailableOperationDisplay `json:"display,omitempty"`
	Origin   *string                    `json:"origin,omitempty"`
	NextLink *string                    `json:"nextLink,omitempty"`
}

// PartitionSchemeDescription is describes how the service is partitioned.
type PartitionSchemeDescription interface {
	AsNamedPartitionSchemeDescription() (*NamedPartitionSchemeDescription, bool)
	AsSingletonPartitionSchemeDescription() (*SingletonPartitionSchemeDescription, bool)
	AsUniformInt64RangePartitionSchemeDescription() (*UniformInt64RangePartitionSchemeDescription, bool)
}

func unmarshalPartitionSchemeDescription(body []byte) (PartitionSchemeDescription, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["PartitionScheme"] {
	case string(PartitionSchemeNamed):
		var npsd NamedPartitionSchemeDescription
		err := json.Unmarshal(body, &npsd)
		return npsd, err
	case string(PartitionSchemeSingleton):
		var spsd SingletonPartitionSchemeDescription
		err := json.Unmarshal(body, &spsd)
		return spsd, err
	case string(PartitionSchemeUniformInt64Range):
		var ui6rpsd UniformInt64RangePartitionSchemeDescription
		err := json.Unmarshal(body, &ui6rpsd)
		return ui6rpsd, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalPartitionSchemeDescriptionArray(body []byte) ([]PartitionSchemeDescription, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	psdArray := make([]PartitionSchemeDescription, len(rawMessages))

	for index, rawMessage := range rawMessages {
		psd, err := unmarshalPartitionSchemeDescription(*rawMessage)
		if err != nil {
			return nil, err
		}
		psdArray[index] = psd
	}
	return psdArray, nil
}

// ProxyResource is the resource model definition.
type ProxyResource struct {
	ID       *string `json:"id,omitempty"`
	Name     *string `json:"name,omitempty"`
	Type     *string `json:"type,omitempty"`
	Location *string `json:"location,omitempty"`
}

// Resource is the resource model definition.
type Resource struct {
	ID       *string             `json:"id,omitempty"`
	Name     *string             `json:"name,omitempty"`
	Type     *string             `json:"type,omitempty"`
	Location *string             `json:"location,omitempty"`
	Tags     *map[string]*string `json:"tags,omitempty"`
}

// RollingUpgradeMonitoringPolicy is the policy used for monitoring the application upgrade
type RollingUpgradeMonitoringPolicy struct {
	HealthCheckWaitDuration   *string `json:"healthCheckWaitDuration,omitempty"`
	HealthCheckStableDuration *string `json:"healthCheckStableDuration,omitempty"`
	HealthCheckRetryTimeout   *string `json:"healthCheckRetryTimeout,omitempty"`
	UpgradeTimeout            *string `json:"upgradeTimeout,omitempty"`
	UpgradeDomainTimeout      *string `json:"upgradeDomainTimeout,omitempty"`
}

// ServiceCorrelationDescription is creates a particular correlation between services.
type ServiceCorrelationDescription struct {
	Scheme      Scheme  `json:"Scheme,omitempty"`
	ServiceName *string `json:"ServiceName,omitempty"`
}

// ServiceLoadMetricDescription is specifies a metric to load balance a service during runtime.
type ServiceLoadMetricDescription struct {
	Name                 *string `json:"Name,omitempty"`
	Weight               Weight  `json:"Weight,omitempty"`
	PrimaryDefaultLoad   *int32  `json:"PrimaryDefaultLoad,omitempty"`
	SecondaryDefaultLoad *int32  `json:"SecondaryDefaultLoad,omitempty"`
	DefaultLoad          *int32  `json:"DefaultLoad,omitempty"`
}

// ServicePlacementPolicyDescription is describes the policy to be used for placement of a Service Fabric service.
type ServicePlacementPolicyDescription interface {
}

func unmarshalServicePlacementPolicyDescription(body []byte) (ServicePlacementPolicyDescription, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["Type"] {
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalServicePlacementPolicyDescriptionArray(body []byte) ([]ServicePlacementPolicyDescription, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	sppdArray := make([]ServicePlacementPolicyDescription, len(rawMessages))

	for index, rawMessage := range rawMessages {
		sppd, err := unmarshalServicePlacementPolicyDescription(*rawMessage)
		if err != nil {
			return nil, err
		}
		sppdArray[index] = sppd
	}
	return sppdArray, nil
}

// ServiceProperties is the service resource properties.
type ServiceProperties interface {
	AsStatelessService() (*StatelessService, bool)
	AsStatefulService() (*StatefulService, bool)
}

func unmarshalServiceProperties(body []byte) (ServiceProperties, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["serviceResourceType"] {
	case string(ServiceResourceTypeStatelessService):
		var ss StatelessService
		err := json.Unmarshal(body, &ss)
		return ss, err
	case string(ServiceResourceTypeStatefulService):
		var ss StatefulService
		err := json.Unmarshal(body, &ss)
		return ss, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalServicePropertiesArray(body []byte) ([]ServiceProperties, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	spArray := make([]ServiceProperties, len(rawMessages))

	for index, rawMessage := range rawMessages {
		sp, err := unmarshalServiceProperties(*rawMessage)
		if err != nil {
			return nil, err
		}
		spArray[index] = sp
	}
	return spArray, nil
}

// ServicePropertiesBase is the common service resource properties.
type ServicePropertiesBase struct {
	PlacementConstraints     *string                              `json:"placementConstraints,omitempty"`
	CorrelationScheme        *[]ServiceCorrelationDescription     `json:"correlationScheme,omitempty"`
	ServiceLoadMetrics       *[]ServiceLoadMetricDescription      `json:"serviceLoadMetrics,omitempty"`
	ServicePlacementPolicies *[]ServicePlacementPolicyDescription `json:"servicePlacementPolicies,omitempty"`
	DefaultMoveCost          DefaultMoveCost                      `json:"defaultMoveCost,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for ServicePropertiesBase struct.
func (spb *ServicePropertiesBase) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["placementConstraints"]
	if v != nil {
		var placementConstraints string
		err = json.Unmarshal(*m["placementConstraints"], &placementConstraints)
		if err != nil {
			return err
		}
		spb.PlacementConstraints = &placementConstraints
	}

	v = m["correlationScheme"]
	if v != nil {
		var correlationScheme []ServiceCorrelationDescription
		err = json.Unmarshal(*m["correlationScheme"], &correlationScheme)
		if err != nil {
			return err
		}
		spb.CorrelationScheme = &correlationScheme
	}

	v = m["serviceLoadMetrics"]
	if v != nil {
		var serviceLoadMetrics []ServiceLoadMetricDescription
		err = json.Unmarshal(*m["serviceLoadMetrics"], &serviceLoadMetrics)
		if err != nil {
			return err
		}
		spb.ServiceLoadMetrics = &serviceLoadMetrics
	}

	v = m["servicePlacementPolicies"]
	if v != nil {
		servicePlacementPolicies, err := unmarshalServicePlacementPolicyDescriptionArray(*m["servicePlacementPolicies"])
		if err != nil {
			return err
		}
		spb.ServicePlacementPolicies = &servicePlacementPolicies
	}

	v = m["defaultMoveCost"]
	if v != nil {
		var defaultMoveCost DefaultMoveCost
		err = json.Unmarshal(*m["defaultMoveCost"], &defaultMoveCost)
		if err != nil {
			return err
		}
		spb.DefaultMoveCost = defaultMoveCost
	}

	return nil
}

// ServiceResource is the service resource.
type ServiceResource struct {
	autorest.Response `json:"-"`
	ID                *string `json:"id,omitempty"`
	Name              *string `json:"name,omitempty"`
	Type              *string `json:"type,omitempty"`
	Location          *string `json:"location,omitempty"`
	ServiceProperties `json:"properties,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for ServiceResource struct.
func (sr *ServiceResource) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["properties"]
	if v != nil {
		properties, err := unmarshalServiceProperties(*m["properties"])
		if err != nil {
			return err
		}
		sr.ServiceProperties = properties
	}

	v = m["id"]
	if v != nil {
		var ID string
		err = json.Unmarshal(*m["id"], &ID)
		if err != nil {
			return err
		}
		sr.ID = &ID
	}

	v = m["name"]
	if v != nil {
		var name string
		err = json.Unmarshal(*m["name"], &name)
		if err != nil {
			return err
		}
		sr.Name = &name
	}

	v = m["type"]
	if v != nil {
		var typeVar string
		err = json.Unmarshal(*m["type"], &typeVar)
		if err != nil {
			return err
		}
		sr.Type = &typeVar
	}

	v = m["location"]
	if v != nil {
		var location string
		err = json.Unmarshal(*m["location"], &location)
		if err != nil {
			return err
		}
		sr.Location = &location
	}

	return nil
}

// ServiceResourceList is the list of service resources.
type ServiceResourceList struct {
	autorest.Response `json:"-"`
	Value             *[]ServiceResource `json:"value,omitempty"`
}

// ServiceResourceUpdate is the service resource for patch operations.
type ServiceResourceUpdate struct {
	autorest.Response       `json:"-"`
	ID                      *string `json:"id,omitempty"`
	Name                    *string `json:"name,omitempty"`
	Type                    *string `json:"type,omitempty"`
	Location                *string `json:"location,omitempty"`
	ServiceUpdateProperties `json:"properties,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for ServiceResourceUpdate struct.
func (sru *ServiceResourceUpdate) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["properties"]
	if v != nil {
		properties, err := unmarshalServiceUpdateProperties(*m["properties"])
		if err != nil {
			return err
		}
		sru.ServiceUpdateProperties = properties
	}

	v = m["id"]
	if v != nil {
		var ID string
		err = json.Unmarshal(*m["id"], &ID)
		if err != nil {
			return err
		}
		sru.ID = &ID
	}

	v = m["name"]
	if v != nil {
		var name string
		err = json.Unmarshal(*m["name"], &name)
		if err != nil {
			return err
		}
		sru.Name = &name
	}

	v = m["type"]
	if v != nil {
		var typeVar string
		err = json.Unmarshal(*m["type"], &typeVar)
		if err != nil {
			return err
		}
		sru.Type = &typeVar
	}

	v = m["location"]
	if v != nil {
		var location string
		err = json.Unmarshal(*m["location"], &location)
		if err != nil {
			return err
		}
		sru.Location = &location
	}

	return nil
}

// ServiceTypeDeltaHealthPolicy is service health policy
type ServiceTypeDeltaHealthPolicy struct {
	MaxPercentDeltaUnhealthyServices *int32 `json:"maxPercentDeltaUnhealthyServices,omitempty"`
}

// ServiceTypeHealthPolicy is represents the health policy used to evaluate the health of services belonging to a
// service type.
type ServiceTypeHealthPolicy struct {
	MaxPercentUnhealthyPartitionsPerService *int32 `json:"MaxPercentUnhealthyPartitionsPerService,omitempty"`
	MaxPercentUnhealthyReplicasPerPartition *int32 `json:"MaxPercentUnhealthyReplicasPerPartition,omitempty"`
	MaxPercentUnhealthyServices             *int32 `json:"MaxPercentUnhealthyServices,omitempty"`
}

// ServiceTypeHealthPolicyMapItem is defines an item in ServiceTypeHealthPolicyMap.
type ServiceTypeHealthPolicyMapItem struct {
	Key   *string                  `json:"Key,omitempty"`
	Value *ServiceTypeHealthPolicy `json:"Value,omitempty"`
}

// ServiceUpdateProperties is the service resource properties for patch operations.
type ServiceUpdateProperties interface {
	AsStatelessServiceUpdate() (*StatelessServiceUpdate, bool)
	AsStatefulServiceUpdate() (*StatefulServiceUpdate, bool)
}

func unmarshalServiceUpdateProperties(body []byte) (ServiceUpdateProperties, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["serviceResourceType"] {
	case string(ServiceResourceTypeStatelessServiceUpdate):
		var ssu StatelessServiceUpdate
		err := json.Unmarshal(body, &ssu)
		return ssu, err
	case string(ServiceResourceTypeStatefulServiceUpdate):
		var ssu StatefulServiceUpdate
		err := json.Unmarshal(body, &ssu)
		return ssu, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalServiceUpdatePropertiesArray(body []byte) ([]ServiceUpdateProperties, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	supArray := make([]ServiceUpdateProperties, len(rawMessages))

	for index, rawMessage := range rawMessages {
		sup, err := unmarshalServiceUpdateProperties(*rawMessage)
		if err != nil {
			return nil, err
		}
		supArray[index] = sup
	}
	return supArray, nil
}

// SettingsParameterDescription is describes a parameter in fabric settings of the cluster.
type SettingsParameterDescription struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// SettingsSectionDescription is describes a section in the fabric settings of the cluster.
type SettingsSectionDescription struct {
	Name       *string                         `json:"name,omitempty"`
	Parameters *[]SettingsParameterDescription `json:"parameters,omitempty"`
}

// SingletonPartitionSchemeDescription is describes the partition scheme of a singleton-partitioned, or non-partitioned
// service.
type SingletonPartitionSchemeDescription struct {
	PartitionScheme PartitionScheme `json:"PartitionScheme,omitempty"`
}

// MarshalJSON is the custom marshaler for SingletonPartitionSchemeDescription.
func (spsd SingletonPartitionSchemeDescription) MarshalJSON() ([]byte, error) {
	spsd.PartitionScheme = PartitionSchemeSingleton
	type Alias SingletonPartitionSchemeDescription
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(spsd),
	})
}

// AsNamedPartitionSchemeDescription is the PartitionSchemeDescription implementation for SingletonPartitionSchemeDescription.
func (spsd SingletonPartitionSchemeDescription) AsNamedPartitionSchemeDescription() (*NamedPartitionSchemeDescription, bool) {
	return nil, false
}

// AsSingletonPartitionSchemeDescription is the PartitionSchemeDescription implementation for SingletonPartitionSchemeDescription.
func (spsd SingletonPartitionSchemeDescription) AsSingletonPartitionSchemeDescription() (*SingletonPartitionSchemeDescription, bool) {
	return &spsd, true
}

// AsUniformInt64RangePartitionSchemeDescription is the PartitionSchemeDescription implementation for SingletonPartitionSchemeDescription.
func (spsd SingletonPartitionSchemeDescription) AsUniformInt64RangePartitionSchemeDescription() (*UniformInt64RangePartitionSchemeDescription, bool) {
	return nil, false
}

// StatefulService is the properties of a stateful service resource.
type StatefulService struct {
	PlacementConstraints       *string                              `json:"placementConstraints,omitempty"`
	CorrelationScheme          *[]ServiceCorrelationDescription     `json:"correlationScheme,omitempty"`
	ServiceLoadMetrics         *[]ServiceLoadMetricDescription      `json:"serviceLoadMetrics,omitempty"`
	ServicePlacementPolicies   *[]ServicePlacementPolicyDescription `json:"servicePlacementPolicies,omitempty"`
	DefaultMoveCost            DefaultMoveCost                      `json:"defaultMoveCost,omitempty"`
	ProvisioningState          *string                              `json:"provisioningState,omitempty"`
	ServiceKind                ServiceKind                          `json:"serviceKind,omitempty"`
	ServiceTypeName            *string                              `json:"serviceTypeName,omitempty"`
	PartitionDescription       PartitionSchemeDescription           `json:"partitionDescription,omitempty"`
	ServiceResourceType        ServiceResourceType                  `json:"serviceResourceType,omitempty"`
	HasPersistedState          *bool                                `json:"hasPersistedState,omitempty"`
	TargetReplicaSetSize       *int32                               `json:"targetReplicaSetSize,omitempty"`
	MinReplicaSetSize          *int32                               `json:"minReplicaSetSize,omitempty"`
	ReplicaRestartWaitDuration *date.Time                           `json:"replicaRestartWaitDuration,omitempty"`
	QuorumLossWaitDuration     *date.Time                           `json:"quorumLossWaitDuration,omitempty"`
	StandByReplicaKeepDuration *date.Time                           `json:"standByReplicaKeepDuration,omitempty"`
}

// MarshalJSON is the custom marshaler for StatefulService.
func (ss StatefulService) MarshalJSON() ([]byte, error) {
	ss.ServiceResourceType = ServiceResourceTypeStatefulService
	type Alias StatefulService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ss),
	})
}

// AsStatelessService is the ServiceProperties implementation for StatefulService.
func (ss StatefulService) AsStatelessService() (*StatelessService, bool) {
	return nil, false
}

// AsStatefulService is the ServiceProperties implementation for StatefulService.
func (ss StatefulService) AsStatefulService() (*StatefulService, bool) {
	return &ss, true
}

// AsServiceProperties is the ServiceProperties implementation for StatefulService.
func (ss StatefulService) AsServiceProperties() (*ServiceProperties, bool) {
	return nil, false
}

// AsServiceUpdateProperties is the ServiceProperties implementation for StatefulService.
func (ss StatefulService) AsServiceUpdateProperties() (*ServiceUpdateProperties, bool) {
	return nil, false
}

// AsStatelessServiceUpdate is the ServiceProperties implementation for StatefulService.
func (ss StatefulService) AsStatelessServiceUpdate() (*StatelessServiceUpdate, bool) {
	return nil, false
}

// AsStatefulServiceUpdate is the ServiceProperties implementation for StatefulService.
func (ss StatefulService) AsStatefulServiceUpdate() (*StatefulServiceUpdate, bool) {
	return nil, false
}

// UnmarshalJSON is the custom unmarshaler for StatefulService struct.
func (ss *StatefulService) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["hasPersistedState"]
	if v != nil {
		var hasPersistedState bool
		err = json.Unmarshal(*m["hasPersistedState"], &hasPersistedState)
		if err != nil {
			return err
		}
		ss.HasPersistedState = &hasPersistedState
	}

	v = m["targetReplicaSetSize"]
	if v != nil {
		var targetReplicaSetSize int32
		err = json.Unmarshal(*m["targetReplicaSetSize"], &targetReplicaSetSize)
		if err != nil {
			return err
		}
		ss.TargetReplicaSetSize = &targetReplicaSetSize
	}

	v = m["minReplicaSetSize"]
	if v != nil {
		var minReplicaSetSize int32
		err = json.Unmarshal(*m["minReplicaSetSize"], &minReplicaSetSize)
		if err != nil {
			return err
		}
		ss.MinReplicaSetSize = &minReplicaSetSize
	}

	v = m["replicaRestartWaitDuration"]
	if v != nil {
		var replicaRestartWaitDuration date.Time
		err = json.Unmarshal(*m["replicaRestartWaitDuration"], &replicaRestartWaitDuration)
		if err != nil {
			return err
		}
		ss.ReplicaRestartWaitDuration = &replicaRestartWaitDuration
	}

	v = m["quorumLossWaitDuration"]
	if v != nil {
		var quorumLossWaitDuration date.Time
		err = json.Unmarshal(*m["quorumLossWaitDuration"], &quorumLossWaitDuration)
		if err != nil {
			return err
		}
		ss.QuorumLossWaitDuration = &quorumLossWaitDuration
	}

	v = m["standByReplicaKeepDuration"]
	if v != nil {
		var standByReplicaKeepDuration date.Time
		err = json.Unmarshal(*m["standByReplicaKeepDuration"], &standByReplicaKeepDuration)
		if err != nil {
			return err
		}
		ss.StandByReplicaKeepDuration = &standByReplicaKeepDuration
	}

	v = m["provisioningState"]
	if v != nil {
		var provisioningState string
		err = json.Unmarshal(*m["provisioningState"], &provisioningState)
		if err != nil {
			return err
		}
		ss.ProvisioningState = &provisioningState
	}

	v = m["serviceKind"]
	if v != nil {
		var serviceKind ServiceKind
		err = json.Unmarshal(*m["serviceKind"], &serviceKind)
		if err != nil {
			return err
		}
		ss.ServiceKind = serviceKind
	}

	v = m["serviceTypeName"]
	if v != nil {
		var serviceTypeName string
		err = json.Unmarshal(*m["serviceTypeName"], &serviceTypeName)
		if err != nil {
			return err
		}
		ss.ServiceTypeName = &serviceTypeName
	}

	v = m["partitionDescription"]
	if v != nil {
		partitionDescription, err := unmarshalPartitionSchemeDescription(*m["partitionDescription"])
		if err != nil {
			return err
		}
		ss.PartitionDescription = partitionDescription
	}

	v = m["serviceResourceType"]
	if v != nil {
		var serviceResourceType ServiceResourceType
		err = json.Unmarshal(*m["serviceResourceType"], &serviceResourceType)
		if err != nil {
			return err
		}
		ss.ServiceResourceType = serviceResourceType
	}

	v = m["placementConstraints"]
	if v != nil {
		var placementConstraints string
		err = json.Unmarshal(*m["placementConstraints"], &placementConstraints)
		if err != nil {
			return err
		}
		ss.PlacementConstraints = &placementConstraints
	}

	v = m["correlationScheme"]
	if v != nil {
		var correlationScheme []ServiceCorrelationDescription
		err = json.Unmarshal(*m["correlationScheme"], &correlationScheme)
		if err != nil {
			return err
		}
		ss.CorrelationScheme = &correlationScheme
	}

	v = m["serviceLoadMetrics"]
	if v != nil {
		var serviceLoadMetrics []ServiceLoadMetricDescription
		err = json.Unmarshal(*m["serviceLoadMetrics"], &serviceLoadMetrics)
		if err != nil {
			return err
		}
		ss.ServiceLoadMetrics = &serviceLoadMetrics
	}

	v = m["servicePlacementPolicies"]
	if v != nil {
		servicePlacementPolicies, err := unmarshalServicePlacementPolicyDescriptionArray(*m["servicePlacementPolicies"])
		if err != nil {
			return err
		}
		ss.ServicePlacementPolicies = &servicePlacementPolicies
	}

	v = m["defaultMoveCost"]
	if v != nil {
		var defaultMoveCost DefaultMoveCost
		err = json.Unmarshal(*m["defaultMoveCost"], &defaultMoveCost)
		if err != nil {
			return err
		}
		ss.DefaultMoveCost = defaultMoveCost
	}

	return nil
}

// StatefulServiceUpdate is the properties of a stateful service resource for patch operations.
type StatefulServiceUpdate struct {
	PlacementConstraints       *string                                    `json:"placementConstraints,omitempty"`
	CorrelationScheme          *[]ServiceCorrelationDescription           `json:"correlationScheme,omitempty"`
	ServiceLoadMetrics         *[]ServiceLoadMetricDescription            `json:"serviceLoadMetrics,omitempty"`
	ServicePlacementPolicies   *[]ServicePlacementPolicyDescription       `json:"servicePlacementPolicies,omitempty"`
	DefaultMoveCost            DefaultMoveCost                            `json:"defaultMoveCost,omitempty"`
	ServiceResourceType        ServiceResourceTypeServiceUpdateProperties `json:"serviceResourceType,omitempty"`
	TargetReplicaSetSize       *int32                                     `json:"targetReplicaSetSize,omitempty"`
	MinReplicaSetSize          *int32                                     `json:"minReplicaSetSize,omitempty"`
	ReplicaRestartWaitDuration *date.Time                                 `json:"replicaRestartWaitDuration,omitempty"`
	QuorumLossWaitDuration     *date.Time                                 `json:"quorumLossWaitDuration,omitempty"`
	StandByReplicaKeepDuration *date.Time                                 `json:"standByReplicaKeepDuration,omitempty"`
}

// MarshalJSON is the custom marshaler for StatefulServiceUpdate.
func (ssu StatefulServiceUpdate) MarshalJSON() ([]byte, error) {
	ssu.ServiceResourceType = ServiceResourceTypeStatefulServiceUpdate
	type Alias StatefulServiceUpdate
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ssu),
	})
}

// AsStatelessServiceUpdate is the ServiceUpdateProperties implementation for StatefulServiceUpdate.
func (ssu StatefulServiceUpdate) AsStatelessServiceUpdate() (*StatelessServiceUpdate, bool) {
	return nil, false
}

// AsStatefulServiceUpdate is the ServiceUpdateProperties implementation for StatefulServiceUpdate.
func (ssu StatefulServiceUpdate) AsStatefulServiceUpdate() (*StatefulServiceUpdate, bool) {
	return &ssu, true
}

// AsServiceProperties is the ServiceUpdateProperties implementation for StatefulServiceUpdate.
func (ssu StatefulServiceUpdate) AsServiceProperties() (*ServiceProperties, bool) {
	return nil, false
}

// AsServiceUpdateProperties is the ServiceUpdateProperties implementation for StatefulServiceUpdate.
func (ssu StatefulServiceUpdate) AsServiceUpdateProperties() (*ServiceUpdateProperties, bool) {
	return nil, false
}

// AsStatelessService is the ServiceUpdateProperties implementation for StatefulServiceUpdate.
func (ssu StatefulServiceUpdate) AsStatelessService() (*StatelessService, bool) {
	return nil, false
}

// AsStatefulService is the ServiceUpdateProperties implementation for StatefulServiceUpdate.
func (ssu StatefulServiceUpdate) AsStatefulService() (*StatefulService, bool) {
	return nil, false
}

// UnmarshalJSON is the custom unmarshaler for StatefulServiceUpdate struct.
func (ssu *StatefulServiceUpdate) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["targetReplicaSetSize"]
	if v != nil {
		var targetReplicaSetSize int32
		err = json.Unmarshal(*m["targetReplicaSetSize"], &targetReplicaSetSize)
		if err != nil {
			return err
		}
		ssu.TargetReplicaSetSize = &targetReplicaSetSize
	}

	v = m["minReplicaSetSize"]
	if v != nil {
		var minReplicaSetSize int32
		err = json.Unmarshal(*m["minReplicaSetSize"], &minReplicaSetSize)
		if err != nil {
			return err
		}
		ssu.MinReplicaSetSize = &minReplicaSetSize
	}

	v = m["replicaRestartWaitDuration"]
	if v != nil {
		var replicaRestartWaitDuration date.Time
		err = json.Unmarshal(*m["replicaRestartWaitDuration"], &replicaRestartWaitDuration)
		if err != nil {
			return err
		}
		ssu.ReplicaRestartWaitDuration = &replicaRestartWaitDuration
	}

	v = m["quorumLossWaitDuration"]
	if v != nil {
		var quorumLossWaitDuration date.Time
		err = json.Unmarshal(*m["quorumLossWaitDuration"], &quorumLossWaitDuration)
		if err != nil {
			return err
		}
		ssu.QuorumLossWaitDuration = &quorumLossWaitDuration
	}

	v = m["standByReplicaKeepDuration"]
	if v != nil {
		var standByReplicaKeepDuration date.Time
		err = json.Unmarshal(*m["standByReplicaKeepDuration"], &standByReplicaKeepDuration)
		if err != nil {
			return err
		}
		ssu.StandByReplicaKeepDuration = &standByReplicaKeepDuration
	}

	v = m["serviceResourceType"]
	if v != nil {
		var serviceResourceType ServiceResourceTypeServiceUpdateProperties
		err = json.Unmarshal(*m["serviceResourceType"], &serviceResourceType)
		if err != nil {
			return err
		}
		ssu.ServiceResourceType = serviceResourceType
	}

	v = m["placementConstraints"]
	if v != nil {
		var placementConstraints string
		err = json.Unmarshal(*m["placementConstraints"], &placementConstraints)
		if err != nil {
			return err
		}
		ssu.PlacementConstraints = &placementConstraints
	}

	v = m["correlationScheme"]
	if v != nil {
		var correlationScheme []ServiceCorrelationDescription
		err = json.Unmarshal(*m["correlationScheme"], &correlationScheme)
		if err != nil {
			return err
		}
		ssu.CorrelationScheme = &correlationScheme
	}

	v = m["serviceLoadMetrics"]
	if v != nil {
		var serviceLoadMetrics []ServiceLoadMetricDescription
		err = json.Unmarshal(*m["serviceLoadMetrics"], &serviceLoadMetrics)
		if err != nil {
			return err
		}
		ssu.ServiceLoadMetrics = &serviceLoadMetrics
	}

	v = m["servicePlacementPolicies"]
	if v != nil {
		servicePlacementPolicies, err := unmarshalServicePlacementPolicyDescriptionArray(*m["servicePlacementPolicies"])
		if err != nil {
			return err
		}
		ssu.ServicePlacementPolicies = &servicePlacementPolicies
	}

	v = m["defaultMoveCost"]
	if v != nil {
		var defaultMoveCost DefaultMoveCost
		err = json.Unmarshal(*m["defaultMoveCost"], &defaultMoveCost)
		if err != nil {
			return err
		}
		ssu.DefaultMoveCost = defaultMoveCost
	}

	return nil
}

// StatelessService is the properties of a stateless service resource.
type StatelessService struct {
	PlacementConstraints     *string                              `json:"placementConstraints,omitempty"`
	CorrelationScheme        *[]ServiceCorrelationDescription     `json:"correlationScheme,omitempty"`
	ServiceLoadMetrics       *[]ServiceLoadMetricDescription      `json:"serviceLoadMetrics,omitempty"`
	ServicePlacementPolicies *[]ServicePlacementPolicyDescription `json:"servicePlacementPolicies,omitempty"`
	DefaultMoveCost          DefaultMoveCost                      `json:"defaultMoveCost,omitempty"`
	ProvisioningState        *string                              `json:"provisioningState,omitempty"`
	ServiceKind              ServiceKind                          `json:"serviceKind,omitempty"`
	ServiceTypeName          *string                              `json:"serviceTypeName,omitempty"`
	PartitionDescription     PartitionSchemeDescription           `json:"partitionDescription,omitempty"`
	ServiceResourceType      ServiceResourceType                  `json:"serviceResourceType,omitempty"`
	InstanceCount            *int32                               `json:"instanceCount,omitempty"`
}

// MarshalJSON is the custom marshaler for StatelessService.
func (ss StatelessService) MarshalJSON() ([]byte, error) {
	ss.ServiceResourceType = ServiceResourceTypeStatelessService
	type Alias StatelessService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ss),
	})
}

// AsStatelessService is the ServiceProperties implementation for StatelessService.
func (ss StatelessService) AsStatelessService() (*StatelessService, bool) {
	return &ss, true
}

// AsStatefulService is the ServiceProperties implementation for StatelessService.
func (ss StatelessService) AsStatefulService() (*StatefulService, bool) {
	return nil, false
}

// AsServiceProperties is the ServiceProperties implementation for StatelessService.
func (ss StatelessService) AsServiceProperties() (*ServiceProperties, bool) {
	return nil, false
}

// AsServiceUpdateProperties is the ServiceProperties implementation for StatelessService.
func (ss StatelessService) AsServiceUpdateProperties() (*ServiceUpdateProperties, bool) {
	return nil, false
}

// AsStatelessServiceUpdate is the ServiceProperties implementation for StatelessService.
func (ss StatelessService) AsStatelessServiceUpdate() (*StatelessServiceUpdate, bool) {
	return nil, false
}

// AsStatefulServiceUpdate is the ServiceProperties implementation for StatelessService.
func (ss StatelessService) AsStatefulServiceUpdate() (*StatefulServiceUpdate, bool) {
	return nil, false
}

// UnmarshalJSON is the custom unmarshaler for StatelessService struct.
func (ss *StatelessService) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["instanceCount"]
	if v != nil {
		var instanceCount int32
		err = json.Unmarshal(*m["instanceCount"], &instanceCount)
		if err != nil {
			return err
		}
		ss.InstanceCount = &instanceCount
	}

	v = m["provisioningState"]
	if v != nil {
		var provisioningState string
		err = json.Unmarshal(*m["provisioningState"], &provisioningState)
		if err != nil {
			return err
		}
		ss.ProvisioningState = &provisioningState
	}

	v = m["serviceKind"]
	if v != nil {
		var serviceKind ServiceKind
		err = json.Unmarshal(*m["serviceKind"], &serviceKind)
		if err != nil {
			return err
		}
		ss.ServiceKind = serviceKind
	}

	v = m["serviceTypeName"]
	if v != nil {
		var serviceTypeName string
		err = json.Unmarshal(*m["serviceTypeName"], &serviceTypeName)
		if err != nil {
			return err
		}
		ss.ServiceTypeName = &serviceTypeName
	}

	v = m["partitionDescription"]
	if v != nil {
		partitionDescription, err := unmarshalPartitionSchemeDescription(*m["partitionDescription"])
		if err != nil {
			return err
		}
		ss.PartitionDescription = partitionDescription
	}

	v = m["serviceResourceType"]
	if v != nil {
		var serviceResourceType ServiceResourceType
		err = json.Unmarshal(*m["serviceResourceType"], &serviceResourceType)
		if err != nil {
			return err
		}
		ss.ServiceResourceType = serviceResourceType
	}

	v = m["placementConstraints"]
	if v != nil {
		var placementConstraints string
		err = json.Unmarshal(*m["placementConstraints"], &placementConstraints)
		if err != nil {
			return err
		}
		ss.PlacementConstraints = &placementConstraints
	}

	v = m["correlationScheme"]
	if v != nil {
		var correlationScheme []ServiceCorrelationDescription
		err = json.Unmarshal(*m["correlationScheme"], &correlationScheme)
		if err != nil {
			return err
		}
		ss.CorrelationScheme = &correlationScheme
	}

	v = m["serviceLoadMetrics"]
	if v != nil {
		var serviceLoadMetrics []ServiceLoadMetricDescription
		err = json.Unmarshal(*m["serviceLoadMetrics"], &serviceLoadMetrics)
		if err != nil {
			return err
		}
		ss.ServiceLoadMetrics = &serviceLoadMetrics
	}

	v = m["servicePlacementPolicies"]
	if v != nil {
		servicePlacementPolicies, err := unmarshalServicePlacementPolicyDescriptionArray(*m["servicePlacementPolicies"])
		if err != nil {
			return err
		}
		ss.ServicePlacementPolicies = &servicePlacementPolicies
	}

	v = m["defaultMoveCost"]
	if v != nil {
		var defaultMoveCost DefaultMoveCost
		err = json.Unmarshal(*m["defaultMoveCost"], &defaultMoveCost)
		if err != nil {
			return err
		}
		ss.DefaultMoveCost = defaultMoveCost
	}

	return nil
}

// StatelessServiceUpdate is the properties of a stateless service resource for patch operations.
type StatelessServiceUpdate struct {
	PlacementConstraints     *string                                    `json:"placementConstraints,omitempty"`
	CorrelationScheme        *[]ServiceCorrelationDescription           `json:"correlationScheme,omitempty"`
	ServiceLoadMetrics       *[]ServiceLoadMetricDescription            `json:"serviceLoadMetrics,omitempty"`
	ServicePlacementPolicies *[]ServicePlacementPolicyDescription       `json:"servicePlacementPolicies,omitempty"`
	DefaultMoveCost          DefaultMoveCost                            `json:"defaultMoveCost,omitempty"`
	ServiceResourceType      ServiceResourceTypeServiceUpdateProperties `json:"serviceResourceType,omitempty"`
	InstanceCount            *int32                                     `json:"instanceCount,omitempty"`
}

// MarshalJSON is the custom marshaler for StatelessServiceUpdate.
func (ssu StatelessServiceUpdate) MarshalJSON() ([]byte, error) {
	ssu.ServiceResourceType = ServiceResourceTypeStatelessServiceUpdate
	type Alias StatelessServiceUpdate
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ssu),
	})
}

// AsStatelessServiceUpdate is the ServiceUpdateProperties implementation for StatelessServiceUpdate.
func (ssu StatelessServiceUpdate) AsStatelessServiceUpdate() (*StatelessServiceUpdate, bool) {
	return &ssu, true
}

// AsStatefulServiceUpdate is the ServiceUpdateProperties implementation for StatelessServiceUpdate.
func (ssu StatelessServiceUpdate) AsStatefulServiceUpdate() (*StatefulServiceUpdate, bool) {
	return nil, false
}

// AsServiceProperties is the ServiceUpdateProperties implementation for StatelessServiceUpdate.
func (ssu StatelessServiceUpdate) AsServiceProperties() (*ServiceProperties, bool) {
	return nil, false
}

// AsServiceUpdateProperties is the ServiceUpdateProperties implementation for StatelessServiceUpdate.
func (ssu StatelessServiceUpdate) AsServiceUpdateProperties() (*ServiceUpdateProperties, bool) {
	return nil, false
}

// AsStatelessService is the ServiceUpdateProperties implementation for StatelessServiceUpdate.
func (ssu StatelessServiceUpdate) AsStatelessService() (*StatelessService, bool) {
	return nil, false
}

// AsStatefulService is the ServiceUpdateProperties implementation for StatelessServiceUpdate.
func (ssu StatelessServiceUpdate) AsStatefulService() (*StatefulService, bool) {
	return nil, false
}

// UnmarshalJSON is the custom unmarshaler for StatelessServiceUpdate struct.
func (ssu *StatelessServiceUpdate) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["instanceCount"]
	if v != nil {
		var instanceCount int32
		err = json.Unmarshal(*m["instanceCount"], &instanceCount)
		if err != nil {
			return err
		}
		ssu.InstanceCount = &instanceCount
	}

	v = m["serviceResourceType"]
	if v != nil {
		var serviceResourceType ServiceResourceTypeServiceUpdateProperties
		err = json.Unmarshal(*m["serviceResourceType"], &serviceResourceType)
		if err != nil {
			return err
		}
		ssu.ServiceResourceType = serviceResourceType
	}

	v = m["placementConstraints"]
	if v != nil {
		var placementConstraints string
		err = json.Unmarshal(*m["placementConstraints"], &placementConstraints)
		if err != nil {
			return err
		}
		ssu.PlacementConstraints = &placementConstraints
	}

	v = m["correlationScheme"]
	if v != nil {
		var correlationScheme []ServiceCorrelationDescription
		err = json.Unmarshal(*m["correlationScheme"], &correlationScheme)
		if err != nil {
			return err
		}
		ssu.CorrelationScheme = &correlationScheme
	}

	v = m["serviceLoadMetrics"]
	if v != nil {
		var serviceLoadMetrics []ServiceLoadMetricDescription
		err = json.Unmarshal(*m["serviceLoadMetrics"], &serviceLoadMetrics)
		if err != nil {
			return err
		}
		ssu.ServiceLoadMetrics = &serviceLoadMetrics
	}

	v = m["servicePlacementPolicies"]
	if v != nil {
		servicePlacementPolicies, err := unmarshalServicePlacementPolicyDescriptionArray(*m["servicePlacementPolicies"])
		if err != nil {
			return err
		}
		ssu.ServicePlacementPolicies = &servicePlacementPolicies
	}

	v = m["defaultMoveCost"]
	if v != nil {
		var defaultMoveCost DefaultMoveCost
		err = json.Unmarshal(*m["defaultMoveCost"], &defaultMoveCost)
		if err != nil {
			return err
		}
		ssu.DefaultMoveCost = defaultMoveCost
	}

	return nil
}

// UniformInt64RangePartitionSchemeDescription is describes a partitioning scheme where an integer range is allocated
// evenly across a number of partitions.
type UniformInt64RangePartitionSchemeDescription struct {
	PartitionScheme PartitionScheme `json:"PartitionScheme,omitempty"`
	Count           *int32          `json:"Count,omitempty"`
	LowKey          *string         `json:"LowKey,omitempty"`
	HighKey         *string         `json:"HighKey,omitempty"`
}

// MarshalJSON is the custom marshaler for UniformInt64RangePartitionSchemeDescription.
func (ui6rpsd UniformInt64RangePartitionSchemeDescription) MarshalJSON() ([]byte, error) {
	ui6rpsd.PartitionScheme = PartitionSchemeUniformInt64Range
	type Alias UniformInt64RangePartitionSchemeDescription
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ui6rpsd),
	})
}

// AsNamedPartitionSchemeDescription is the PartitionSchemeDescription implementation for UniformInt64RangePartitionSchemeDescription.
func (ui6rpsd UniformInt64RangePartitionSchemeDescription) AsNamedPartitionSchemeDescription() (*NamedPartitionSchemeDescription, bool) {
	return nil, false
}

// AsSingletonPartitionSchemeDescription is the PartitionSchemeDescription implementation for UniformInt64RangePartitionSchemeDescription.
func (ui6rpsd UniformInt64RangePartitionSchemeDescription) AsSingletonPartitionSchemeDescription() (*SingletonPartitionSchemeDescription, bool) {
	return nil, false
}

// AsUniformInt64RangePartitionSchemeDescription is the PartitionSchemeDescription implementation for UniformInt64RangePartitionSchemeDescription.
func (ui6rpsd UniformInt64RangePartitionSchemeDescription) AsUniformInt64RangePartitionSchemeDescription() (*UniformInt64RangePartitionSchemeDescription, bool) {
	return &ui6rpsd, true
}

// VersionProperties is the properties of the version resource.
type VersionProperties struct {
	ProvisioningState    *string                 `json:"provisioningState,omitempty"`
	AppPackageURL        *string                 `json:"appPackageUrl,omitempty"`
	DefaultParameterList *[]ApplicationParameter `json:"defaultParameterList,omitempty"`
}

// VersionResource is a version resource for the specified application type name.
type VersionResource struct {
	autorest.Response  `json:"-"`
	ID                 *string `json:"id,omitempty"`
	Name               *string `json:"name,omitempty"`
	Type               *string `json:"type,omitempty"`
	Location           *string `json:"location,omitempty"`
	*VersionProperties `json:"properties,omitempty"`
}

// VersionResourceList is the list of version resources for the specified application type name.
type VersionResourceList struct {
	autorest.Response `json:"-"`
	Value             *[]VersionResource `json:"value,omitempty"`
}
