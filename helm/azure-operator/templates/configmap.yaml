apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "resource.default.name"  . }}
  namespace: {{ include "resource.default.namespace"  . }}
  labels:
    {{- include "labels.common" . | nindent 4 }}
data:
  config.yaml: |
    server:
      enable:
        debug:
          server: true
      listen:
        address: 'http://0.0.0.0:8000'
    service:
      azure:
        environmentName: '{{ .Values.Installation.V1.Provider.Azure.Cloud }}'
        hostCluster:
          cidr: '{{ .Values.Installation.V1.Provider.Azure.HostCluster.CIDR }}'
          resourceGroup: '{{ .Values.Installation.V1.Provider.Azure.HostCluster.ResourceGroup }}'
          virtualNetwork: '{{ .Values.Installation.V1.Provider.Azure.HostCluster.VirtualNetwork }}'
          virtualNetworkGateway: '{{ .Values.Installation.V1.Provider.Azure.HostCluster.VirtualNetworkGateway }}'
        location: '{{ .Values.Installation.V1.Provider.Azure.Location }}'
        msi:
          enabled: '{{ .Values.Installation.V1.Provider.Azure.MSI.Enabled }}'
      cluster:
        baseDomain: '{{ .Values.Installation.V1.BaseDomain }}'
        calico:
          cidr: '{{ .Values.Installation.V1.Guest.Calico.CIDR }}'
          mtu: 1430
          subnet: '{{ .Values.Installation.V1.Guest.Calico.Subnet }}'
        docker:
          daemon:
            cidr: '{{ .Values.Installation.V1.Guest.Docker.CIDR }}'
            extraArgs: '--log-opt max-size=25m --log-opt max-file=2 --log-opt labels=io.kubernetes.container.hash,io.kubernetes.container.name,io.kubernetes.pod.name,io.kubernetes.pod.namespace,io.kubernetes.pod.uid'
        etcd:
          altNames: ''
          port: 2379
          prefix: 'giantswarm.io'
        kubernetes:
          api:
            altNames: 'kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.{{ .Values.Installation.V1.Guest.Kubernetes.API.Domain }}'
            clusterIPRange: '{{ .Values.Installation.V1.Guest.Kubernetes.API.ClusterIPRange }}'
            securePort: 443
          domain: '{{ .Values.Installation.V1.Guest.Kubernetes.ClusterDomain }}'
          ingressController:
            baseDomain:  '{{ .Values.Installation.V1.Guest.Kubernetes.IngressController.BaseDomain }}'
            docker:
              image: 'quay.io/giantswarm/nginx-ingress-controller:{{ .Values.Installation.V1.Guest.Ingress.Version }}'
            insecurePort: 30010
            securePort: 30011
          kubectl:
            docker:
              image: 'quay.io/giantswarm/docker-kubectl:{{ .Values.Installation.V1.Guest.Kubectl.Version }}'
          kubelet:
            altNames: 'kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.{{ .Values.Installation.V1.Guest.Kubernetes.ClusterDomain }}'
            labels: ''
            port: 10250
          networkSetup:
            docker:
              image: '{{ .Values.Installation.V1.Registry.Domain }}/giantswarm/k8s-setup-network-environment:1f4ffc52095ac368847ce3428ea99b257003d9b9'
          ssh:
            userList: '{{ .Values.Installation.V1.Guest.SSH.UserList }}'
      installation:
        name: '{{ .Values.Installation.V1.Name }}'
      {{- if .Values.Installation.V1.Guest }}
        guest:
          IPAM:
            Network:
              CIDR: '{{ .Values.Installation.V1.Guest.IPAM.NetworkCIDR }}'
              subnetMaskBits: '{{ .Values.Installation.V1.Guest.IPAM.CIDRMask }}'
        tenant:
          kubernetes:
            api:
              auth:
                provider:
                  oidc:
                    clientID: '{{ .Values.Installation.V1.Guest.Kubernetes.API.Auth.Provider.OIDC.ClientID }}'
                    issuerURL: '{{ .Values.Installation.V1.Guest.Kubernetes.API.Auth.Provider.OIDC.IssuerURL }}'
                    usernameClaim: '{{ .Values.Installation.V1.Guest.Kubernetes.API.Auth.Provider.OIDC.UsernameClaim }}'
                    groupsClaim: '{{ .Values.Installation.V1.Guest.Kubernetes.API.Auth.Provider.OIDC.GroupsClaim }}'
        {{- end }}
      kubernetes:
        incluster: true
      registryDomain: '{{ .Values.Installation.V1.Registry.Domain }}'
      registry:
        domain: '{{ .Values.Installation.V1.Registry.Domain }}'
        mirrors: '{{ range $i, $e := .Values.Installation.V1.Registry.Mirrors }}{{ if $i }},{{end}}{{ $e }}{{end}}'
      tenant:
        ssh:
          ssoPublicKey: '{{ .Values.Installation.V1.Guest.SSH.SSOPublicKey }}'
      {{- if .Values.Installation.V1.Sentry }}
      sentry:
        dsn: '{{ .Values.Installation.V1.Sentry.DSN }}'
      {{- end }}
