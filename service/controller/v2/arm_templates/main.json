{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "clusterID": {
      "type": "string",
      "metadata": {
        "description": "Unique ID of this guest cluster."
      }
    },
    "GiantSwarmTags": {
      "type": "object",
      "defaultValue": {
        "provider": "F80D01C0-7AAC-4440-98F6-5061511962AD"
      }
    },
    "initialProvisioning": {
      "type": "string",
      "defaultValue": "Yes",
      "metadata": {
        "description": "Whether the deployment is provisioned the very first time."
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "Virtual network's name of the guest cluster"
      }
    },
    "virtualNetworkCidr": {
      "type": "string",
      "metadata": {
        "description": "The main CIDR block reserved for this virtual network."
      }
    },
    "calicoSubnetCidr": {
      "type": "string"
    },
    "masterSubnetCidr": {
      "type": "string"
    },
    "workerSubnetCidr": {
      "type": "string"
    },
    "vpnSubnetCidr": {
      "type": "string"
    },
    "hostClusterCidr": {
      "type": "string"
    },
    "vpnGatewayName": {
      "type": "string"
    },
    "kubernetesAPISecurePort": {
      "type": "int"
    },
    "masterNodes": {
      "type": "array"
    },
    "workerNodes": {
      "type": "array"
    },
    "masterDisablePasswordAuth": {
      "type": "bool",
      "defaultValue": true
    },
    "workerDisablePasswordAuth": {
      "type": "bool",
      "defaultValue": true
    },
    "masterCloudConfigData": {
      "type": "secureString",
      "metadata": {
        "description": "Base64-encoded cloud-config data."
      }
    },
    "workerCloudConfigData": {
      "type": "secureString",
      "metadata": {
        "description": "Base64-encoded cloud-config data."
      }
    },
    "templatesBaseURI" : {
      "type": "string",
      "metadata": {
        "description": "The base URI from which the templates will be fetched. Ends with a trailing '/'."
      }
    },
    "dnsASetupTemplateFile": {
      "type": "string",
      "defaultValue": "dns_a_setup.json"
    },
    "dnsCNAMESetupTemplateFile": {
      "type": "string",
      "defaultValue": "dns_cname_setup.json"
    },
    "kubernetesLoadBalancerTemplateFile": {
      "type": "string",
      "defaultValue": "kubernetes_load_balancer_setup.json"
    },
    "publicLoadBalancerTemplateFile": {
      "type": "string",
      "defaultValue": "public_load_balancer_setup.json"
    },
    "privateLoadBalancerTemplateFile": {
      "type": "string",
      "defaultValue": "private_load_balancer_setup.json"
    },
    "routeTableTemplateFile": {
      "type": "string",
      "defaultValue": "route_table_setup.json"
    },
    "securityGroupsSetupTemplateFile": {
      "type": "string",
      "defaultValue": "security_groups_setup.json"
    },
    "virtualNetworkSetupTemplateFile": {
      "type": "string",
      "defaultValue": "virtual_network_setup.json"
    },
    "virtualNetworkGatewaySetupTemplateFile": {
      "type": "string",
      "defaultValue": "virtual_network_gateway.json"
    },
    "vmssMSIEnabled": {
      "type": "bool"
    },
    "vmssTemplateFile": {
      "type": "string",
      "defaultValue": "vmss.json"
    },
    "dnsZones": {
      "type": "object",
      "metadata": {
        "description": "The DNS zones for kubernetes api and ingress."
      }
    }
  },
  "variables": {
    "dnsASetupTemplateURI": "[concat(parameters('templatesBaseURI'), parameters('dnsASetupTemplateFile'))]",
    "dnsCNAMESetupTemplateURI": "[concat(parameters('templatesBaseURI'), parameters('dnsCNAMESetupTemplateFile'))]",
    "kubernetesLBBackendID": "[concat(resourceId('Microsoft.Network/loadBalancers', 'kubernetes'), '/backendAddressPools/kubernetes')]",
    "kubernetesLoadBalancerTemplateURI": "[concat(parameters('templatesBaseURI'), parameters('kubernetesLoadBalancerTemplateFile'))]",
    "publicLoadBalancerTemplateURI": "[concat(parameters('templatesBaseURI'), parameters('publicLoadBalancerTemplateFile'))]",
    "privateLoadBalancerTemplateURI": "[concat(parameters('templatesBaseURI'), parameters('privateLoadBalancerTemplateFile'))]",
    "routeTableTemplateURI": "[concat(parameters('templatesBaseURI'), parameters('routeTableTemplateFile'))]",
    "securityGroupsSetupTemplateURI": "[concat(parameters('templatesBaseURI'), parameters('securityGroupsSetupTemplateFile'))]",
    "virtualNetworkSetupTemplateURI": "[concat(parameters('templatesBaseURI'), parameters('virtualNetworkSetupTemplateFile'))]",
    "virtualNetworkGatewaySetupTemplateURI": "[concat(parameters('templatesBaseURI'), parameters('virtualNetworkGatewaySetupTemplateFile'))]",
    "vmssTemplateURI": "[concat(parameters('templatesBaseURI'), parameters('vmssTemplateFile'))]",
    "masterPrefix": "Master",
    "workerPrefix": "Worker"
  },
  "resources": [
    {
      "apiVersion": "2016-09-01",
      "name": "security_groups_setup",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "incremental",
        "templateLink": {
          "uri": "[variables('securityGroupsSetupTemplateURI')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "clusterID": {"value": "[parameters('clusterID')]"},
          "GiantSwarmTags": {"value": "[parameters('GiantSwarmTags')]"},
          "virtualNetworkCidr": {"value": "[parameters('virtualNetworkCidr')]"},
          "calicoSubnetCidr": {"value": "[parameters('calicoSubnetCidr')]"},
          "masterSubnetCidr": {"value": "[parameters('masterSubnetCidr')]"},
          "workerSubnetCidr": {"value": "[parameters('workerSubnetCidr')]"},
          "hostClusterCidr": {"value": "[parameters('hostClusterCidr')]"},
          "kubernetesAPISecurePort": {"value": "[parameters('kubernetesAPISecurePort')]"},
          "initialProvisioning": {"value": "[parameters('initialProvisioning')]"}
        }
      }
    },
    {
      "apiVersion": "2016-09-01",
      "name": "route_table_setup",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "incremental",
        "templateLink": {
          "uri": "[variables('routeTableTemplateURI')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "clusterID": {"value": "[parameters('clusterID')]"},
          "GiantSwarmTags": {"value": "[parameters('GiantSwarmTags')]"},
          "initialProvisioning": {"value": "[parameters('initialProvisioning')]"}
        }
      }
    },
    {
      "apiVersion": "2016-09-01",
      "name": "virtual_network_setup",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "route_table_setup"
      ],
      "properties": {
        "mode": "incremental",
        "templateLink": {
          "uri": "[variables('virtualNetworkSetupTemplateURI')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "GiantSwarmTags": {"value": "[parameters('GiantSwarmTags')]"},
          "virtualNetworkName": {"value": "[parameters('virtualNetworkName')]"},
          "virtualNetworkCidr": {"value": "[parameters('virtualNetworkCidr')]"},
          "masterSubnetCidr": {"value": "[parameters('masterSubnetCidr')]"},
          "workerSubnetCidr": {"value": "[parameters('workerSubnetCidr')]"},
          "vpnSubnetCidr": {"value": "[parameters('vpnSubnetCidr')]"},
          "masterSecurityGroupID": {"value": "[reference('security_groups_setup').outputs.masterSecurityGroupID.value]"},
          "workerSecurityGroupID": {"value": "[reference('security_groups_setup').outputs.workerSecurityGroupID.value]"},
          "routeTableID": {"value": "[reference('route_table_setup').outputs.id.value]"}
        }
      }
    },
    {
      "apiVersion": "2016-09-01",
      "name": "virtual_network_gateway_setup",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "virtual_network_setup"
      ],
      "properties": {
        "mode": "incremental",
        "templateLink": {
          "uri": "[variables('virtualNetworkGatewaySetupTemplateURI')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "clusterID": {"value": "[parameters('clusterID')]"},
          "GiantSwarmTags": {"value": "[parameters('GiantSwarmTags')]"},
          "virtualNetworkName": {"value": "[parameters('virtualNetworkName')]"},
          "vpnSubnetName": {"value": "[reference('virtual_network_setup').outputs.vpnSubnetID.value]"}
        }
      }
    },
    {
      "apiVersion": "2016-09-01",
      "name": "api_load_balancer_setup",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "incremental",
        "templateLink": {
          "uri": "[variables('publicLoadBalancerTemplateURI')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "clusterID": {"value": "[parameters('clusterID')]"},
          "GiantSwarmTags": {"value": "[parameters('GiantSwarmTags')]"},
          "prefix": {"value": "API"},
          "ports": {"value":
            [
              {
                "frontend": 443,
                "backend": 443
              }
            ]
          }
        }
      }
    },
    {
      "apiVersion": "2016-09-01",
      "name": "etcd_load_balancer_setup",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "incremental",
        "templateLink": {
          "uri": "[variables('privateLoadBalancerTemplateURI')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "clusterID": {"value": "[parameters('clusterID')]"},
          "GiantSwarmTags": {"value": "[parameters('GiantSwarmTags')]"},
          "prefix": {"value": "ETCD"},
          "ports": {"value":
          [
            {
              "frontend": 2379,
              "backend": 2379
            }
          ]
          },
          "masterSubnetID": {"value": "[reference('virtual_network_setup').outputs.masterSubnetID.value]"}
        }
      }
    },
    {
      "apiVersion": "2016-09-01",
      "name": "kubernetes_load_balancer_setup",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "incremental",
        "templateLink": {
          "uri": "[variables('kubernetesLoadBalancerTemplateURI')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "initialProvisioning": {"value": "[parameters('initialProvisioning')]"}
        }
      }
    },
    {
      "apiVersion": "2016-09-01",
      "name": "kubernetes_api_dns_setup",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "incremental",
        "templateLink": {
          "uri": "[variables('dnsASetupTemplateURI')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "dnsZone": { "value": "[concat(parameters('clusterID'), '.k8s.', parameters('dnsZones').api.name)]" },
          "GiantSwarmTags": {"value": "[parameters('GiantSwarmTags')]"},
          "prefix": { "value": "api" },
          "ipAddress": { "value": "[reference('api_load_balancer_setup').outputs.ipAddress.value]" }
        }
      }
    },
    {
      "apiVersion": "2016-09-01",
      "name": "kubernetes_etcd_dns_setup",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "incremental",
        "templateLink": {
          "uri": "[variables('dnsASetupTemplateURI')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "dnsZone": { "value": "[concat(parameters('clusterID'), '.k8s.', parameters('dnsZones').api.name)]" },
          "GiantSwarmTags": {"value": "[parameters('GiantSwarmTags')]"},
          "prefix": { "value": "etcd" },
          "ipAddress": { "value": "[reference('etcd_load_balancer_setup').outputs.ipAddress.value]" }
        }
      }
    },
    {
      "apiVersion": "2016-09-01",
      "name": "kubernetes_ingress_wildcard_dns_setup",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "incremental",
        "templateLink": {
          "uri": "[variables('dnsCNAMESetupTemplateURI')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "dnsZone": { "value": "[concat(parameters('clusterID'), '.k8s.', parameters('dnsZones').ingress.name)]" },
          "GiantSwarmTags": {"value": "[parameters('GiantSwarmTags')]"},
          "prefix": { "value": "*" },
          "cname": { "value": "[concat('ingress.', parameters('clusterID'), '.k8s.', parameters('dnsZones').ingress.name)]" }
        }
      }
    },
    {
      "apiVersion": "2016-09-01",
      "type": "Microsoft.Resources/deployments",
      "name": "master-vmss-deploy",
      "properties": {
        "mode": "incremental",
        "templateLink": {
          "uri": "[variables('vmssTemplateURI')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {"value": "[resourceGroup().location]"},
          "GiantSwarmTags": {"value": "[parameters('GiantSwarmTags')]"},
          "vmssName": {"value": "[concat(parameters('clusterID'), '-master')]"},
          "vmssMSIEnabled": {"value": "[parameters('vmssMSIEnabled')]"},
          "vmssVmSize": {"value": "[parameters('masterNodes')[0].vmSize]"},
          "vmssVmCount": {"value": "[length(parameters('masterNodes'))]"},
          "vmssVmDataDisks": {"value": [
                  {"name": "EtcdDisk", "sizeGB": 100},
                  {"name": "DockerDisk", "sizeGB": 50}
          ]},
          "vmssSshUser": {"value": "[parameters('masterNodes')[0].adminUsername]"},
          "vmssSshPublicKey": {"value": "[parameters('masterNodes')[0].adminSSHKeyData]"},
          "vmssOsImagePublisher": {"value": "[parameters('masterNodes')[0].osImage.publisher]"},
          "vmssOsImageOffer": {"value": "[parameters('masterNodes')[0].osImage.offer]"},
          "vmssOsImageSKU": {"value": "[parameters('masterNodes')[0].osImage.sku]"},
          "vmssOsImageVersion": {"value": "[parameters('masterNodes')[0].osImage.version]"},
          "vmssOverprovision": {"value": "false"},
          "vmssVmCustomData": {"value": "[parameters('masterCloudConfigData')]"},
          "vmssLbBackendPools": {"value": [
            {"id": "[reference('api_load_balancer_setup').outputs.backendPoolId.value]"},
            {"id": "[reference('etcd_load_balancer_setup').outputs.backendPoolId.value]"}
          ]},
          "vmssVnetSubnetId": {"value": "[reference('virtual_network_setup').outputs.masterSubnetID.value]"},
          "vmssUpgradePolicy": {"value": "Manual"}
        }
      }
    },
    {
      "apiVersion": "2016-09-01",
      "type": "Microsoft.Resources/deployments",
      "name": "worker-vmss-deploy",
      "properties": {
        "mode": "incremental",
        "templateLink": {
          "uri": "[variables('vmssTemplateURI')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {"value": "[resourceGroup().location]"},
          "GiantSwarmTags": {"value": "[parameters('GiantSwarmTags')]"},
          "vmssName": {"value": "[concat(parameters('clusterID'), '-worker')]"},
          "vmssMSIEnabled": {"value": "[parameters('vmssMSIEnabled')]"},
          "vmssVmSize": {"value": "[parameters('workerNodes')[0].vmSize]"},
          "vmssVmCount": {"value": "[length(parameters('workerNodes'))]"},
          "vmssVmDataDisks": {"value": [{"name": "DockerDisk", "sizeGB": 50}]},
          "vmssSshUser": {"value": "[parameters('workerNodes')[0].adminUsername]"},
          "vmssSshPublicKey": {"value": "[parameters('workerNodes')[0].adminSSHKeyData]"},
          "vmssOsImagePublisher": {"value": "[parameters('workerNodes')[0].osImage.publisher]"},
          "vmssOsImageOffer": {"value": "[parameters('workerNodes')[0].osImage.offer]"},
          "vmssOsImageSKU": {"value": "[parameters('workerNodes')[0].osImage.sku]"},
          "vmssOsImageVersion": {"value": "[parameters('workerNodes')[0].osImage.version]"},
          "vmssOverprovision": {"value": "true"},
          "vmssVmCustomData": {"value": "[parameters('workerCloudConfigData')]"},
          "vmssLbBackendPools": {"value": [
            {"id": "[variables('kubernetesLBBackendID')]"}
          ]},
          "vmssVnetSubnetId": {"value": "[reference('virtual_network_setup').outputs.workerSubnetID.value]"},
          "vmssUpgradePolicy": {"value": "Manual"}
        }
      }
    }
  ]
}
