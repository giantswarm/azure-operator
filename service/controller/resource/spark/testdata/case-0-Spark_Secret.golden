apiVersion: v1
data:
  ignitionBlob: {
  "ignition": {
    "config": {},
    "security": {
      "tls": {}
    },
    "timeouts": {},
    "version": "2.2.0"
  },
  "networkd": {},
  "passwd": {
    "users": [
      {
        "groups": [
          "sudo",
          "docker"
        ],
        "name": "giantswarm",
        "sshAuthorizedKeys": [
          "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCuJvxy3FKGrfJ4XB5exEdKXiqqteXEPFzPtex6dC0lHyigtO7l+NXXbs9Lga2+Ifs0Tza92MRhg/FJ+6za3oULFo7+gDyt86DIkZkMFdnSv9+YxYe+g4zqakSV+bLVf2KP6krUGJb7t4Nb+gGH62AiUx+58Onxn5rvYC0/AXOYhkAiH8PydXTDJDPhSA/qWSWEeCQistpZEDFnaVi0e7uq/k3hWJ+v9Gz0qqChHKWWOYp3W6aiIE3G6gLOXNEBdWRrjK6xmrSmo9Toqh1G7iIV0Y6o9w5gIHJxf6+8X70DCuVDx9OLHmjjMyGnd+1c3yTFMUdugtvmeiGWE0E7ZjNSNIqWlnvYJ0E1XPBiyQ7nhitOtVvPC4kpRP7nOFiCK9n8Lr3z3p4v3GO0FU3/qvLX+ECOrYK316gtwSJMd+HIouCbaJaFGvT34peaq1uluOP/JE+rFOnszZFpCYgTY2b4lWjf2krkI/a/3NDJPnRpjoE3RjmbepkZeIdOKTCTH1xYZ3O8dWKRX8X4xORvKJO+oV2UdoZlFa/WJTmq23z4pCVm0UWDYR5C2b9fHwxh/xrPT7CQ0E+E9wmeOvR4wppDMseGQCL+rSzy2AYiQ3D8iQxk0r6T+9MyiRCfuY73p63gB3m37jMQSLHvm77MkRnYcBy61Qxk+y+ls2D0xJfqxw== giantswarm"
        ],
        "shell": "/bin/bash",
        "uid": 1000
      },
      {
        "groups": [
          "sudo",
          "docker"
        ],
        "name": "jose",
        "sshAuthorizedKeys": [
          "publickey"
        ],
        "shell": "/bin/bash"
      }
    ]
  },
  "storage": {
    "directories": [
      {
        "filesystem": "root",
        "group": {
          "name": "giantswarm"
        },
        "mode": 2644,
        "path": "/var/log/fluentbit_db",
        "user": {
          "name": "giantswarm"
        }
      }
    ],
    "files": [
      {
        "contents": {
          "verification": {}
        },
        "filesystem": "root",
        "path": "/boot/coreos/first_boot"
      },
      {
        "contents": {
          "source": "data:text/plain;base64,c3NvUHVibGljS2V5Cg==",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 420,
        "path": "/etc/ssh/trusted-user-ca-keys.pem"
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,a2luZDogS3ViZWxldENvbmZpZ3VyYXRpb24KYXBpVmVyc2lvbjoga3ViZWxldC5jb25maWcuazhzLmlvL3YxYmV0YTEKYWRkcmVzczogJHtERUZBVUxUX0lQVjR9CnBvcnQ6IDEwMjUwCmhlYWx0aHpCaW5kQWRkcmVzczogIjAuMC4wLjAiCmhlYWx0aHpQb3J0OiAxMDI0OApjbHVzdGVyRE5TOgogIC0gMTAuMC4wLjEwCmNsdXN0ZXJEb21haW46IApldmljdGlvblNvZnQ6CiAgbWVtb3J5LmF2YWlsYWJsZTogIjUwME1pIgpldmljdGlvbkhhcmQ6CiAgbWVtb3J5LmF2YWlsYWJsZTogIjIwME1pIgogIGltYWdlZnMuYXZhaWxhYmxlOiAiMTUlIgpldmljdGlvblNvZnRHcmFjZVBlcmlvZDoKICBtZW1vcnkuYXZhaWxhYmxlOiAiNXMiCmV2aWN0aW9uTWF4UG9kR3JhY2VQZXJpb2Q6IDYwCmt1YmVSZXNlcnZlZDoKICBjcHU6IDI1MG0KICBtZW1vcnk6IDc2OE1pCiAgZXBoZW1lcmFsLXN0b3JhZ2U6IDEwMjRNaQprdWJlUmVzZXJ2ZWRDZ3JvdXA6IC9rdWJlcmVzZXJ2ZWQuc2xpY2UKbWF4UG9kczogJHtNQVhfUE9EU30Kc3lzdGVtUmVzZXJ2ZWQ6CiAgY3B1OiAyNTBtCiAgbWVtb3J5OiAzODRNaQpzeXN0ZW1SZXNlcnZlZENncm91cDogL3N5c3RlbS5zbGljZQphdXRoZW50aWNhdGlvbjoKICBhbm9ueW1vdXM6CiAgICBlbmFibGVkOiB0cnVlICMgRGVmYXVsdHMgdG8gZmFsc2UgYXMgb2YgMS4xMAogIHdlYmhvb2s6CiAgICBlbmFibGVkOiBmYWxzZSAjIERlYWZ1bHRzIHRvIHRydWUgYXMgb2YgMS4xMAphdXRob3JpemF0aW9uOgogIG1vZGU6IEFsd2F5c0FsbG93ICMgRGVhZnVsdHMgdG8gd2ViaG9vayBhcyBvZiAxLjEwCmZlYXR1cmVHYXRlczoKICBUVExBZnRlckZpbmlzaGVkOiB0cnVlCnRsc0NpcGhlclN1aXRlczoKICAtIFRMU19FQ0RIRV9FQ0RTQV9XSVRIX0FFU18xMjhfR0NNX1NIQTI1NgogIC0gVExTX0VDREhFX0VDRFNBX1dJVEhfQUVTXzI1Nl9HQ01fU0hBMzg0CiAgLSBUTFNfRUNESEVfRUNEU0FfV0lUSF9DSEFDSEEyMF9QT0xZMTMwNQogIC0gVExTX0VDREhFX1JTQV9XSVRIX0FFU18xMjhfR0NNX1NIQTI1NgogIC0gVExTX0VDREhFX1JTQV9XSVRIX0FFU18yNTZfR0NNX1NIQTM4NAogIC0gVExTX0VDREhFX1JTQV9XSVRIX0NIQUNIQTIwX1BPTFkxMzA1CiAgLSBUTFNfUlNBX1dJVEhfQUVTXzI1Nl9HQ01fU0hBMzg0CiAgLSBUTFNfUlNBX1dJVEhfQUVTXzEyOF9HQ01fU0hBMjU2Cg==",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 420,
        "path": "/etc/kubernetes/config/kubelet.yaml.tmpl"
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnCnVzZXJzOgotIG5hbWU6IGt1YmVsZXQKICB1c2VyOgogICAgY2xpZW50LWNlcnRpZmljYXRlOiAvZXRjL2t1YmVybmV0ZXMvc3NsL3dvcmtlci1jcnQucGVtCiAgICBjbGllbnQta2V5OiAvZXRjL2t1YmVybmV0ZXMvc3NsL3dvcmtlci1rZXkucGVtCmNsdXN0ZXJzOgotIG5hbWU6IGxvY2FsCiAgY2x1c3RlcjoKICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eTogL2V0Yy9rdWJlcm5ldGVzL3NzbC93b3JrZXItY2EucGVtCiAgICBzZXJ2ZXI6IGh0dHBzOi8vYXBpLmM2Zm1lLms4cy5naG9zdC53ZXN0ZXVyb3BlLmF6dXJlLmdpZ2FudGljLmlvCmNvbnRleHRzOgotIGNvbnRleHQ6CiAgICBjbHVzdGVyOiBsb2NhbAogICAgdXNlcjoga3ViZWxldAogIG5hbWU6IHNlcnZpY2UtYWNjb3VudC1jb250ZXh0CmN1cnJlbnQtY29udGV4dDogc2VydmljZS1hY2NvdW50LWNvbnRleHQK",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 420,
        "path": "/etc/kubernetes/kubeconfig/kubelet.yaml"
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,YXBpVmVyc2lvbjoga3ViZXByb3h5LmNvbmZpZy5rOHMuaW8vdjFhbHBoYTEKY2xpZW50Q29ubmVjdGlvbjoKICBrdWJlY29uZmlnOiAvZXRjL2t1YmVybmV0ZXMvY29uZmlnL3Byb3h5LWt1YmVjb25maWcueWFtbApraW5kOiBLdWJlUHJveHlDb25maWd1cmF0aW9uCm1vZGU6IGlwdGFibGVzCm1ldHJpY3NCaW5kQWRkcmVzczogMC4wLjAuMDoxMDI0OQo=",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 420,
        "path": "/etc/kubernetes/config/proxy-config.yml"
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnCnVzZXJzOgotIG5hbWU6IHByb3h5CiAgdXNlcjoKICAgIGNsaWVudC1jZXJ0aWZpY2F0ZTogL2V0Yy9rdWJlcm5ldGVzL3NzbC93b3JrZXItY3J0LnBlbQogICAgY2xpZW50LWtleTogL2V0Yy9rdWJlcm5ldGVzL3NzbC93b3JrZXIta2V5LnBlbQpjbHVzdGVyczoKLSBuYW1lOiBsb2NhbAogIGNsdXN0ZXI6CiAgICBjZXJ0aWZpY2F0ZS1hdXRob3JpdHk6IC9ldGMva3ViZXJuZXRlcy9zc2wvd29ya2VyLWNhLnBlbQogICAgc2VydmVyOiBodHRwczovL2FwaS5jNmZtZS5rOHMuZ2hvc3Qud2VzdGV1cm9wZS5henVyZS5naWdhbnRpYy5pbwpjb250ZXh0czoKLSBjb250ZXh0OgogICAgY2x1c3RlcjogbG9jYWwKICAgIHVzZXI6IHByb3h5CiAgbmFtZTogc2VydmljZS1hY2NvdW50LWNvbnRleHQKY3VycmVudC1jb250ZXh0OiBzZXJ2aWNlLWFjY291bnQtY29udGV4dAo=",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 420,
        "path": "/etc/kubernetes/config/proxy-kubeconfig.yaml"
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnCnVzZXJzOgotIG5hbWU6IHByb3h5CiAgdXNlcjoKICAgIGNsaWVudC1jZXJ0aWZpY2F0ZTogL2V0Yy9rdWJlcm5ldGVzL3NzbC93b3JrZXItY3J0LnBlbQogICAgY2xpZW50LWtleTogL2V0Yy9rdWJlcm5ldGVzL3NzbC93b3JrZXIta2V5LnBlbQpjbHVzdGVyczoKLSBuYW1lOiBsb2NhbAogIGNsdXN0ZXI6CiAgICBjZXJ0aWZpY2F0ZS1hdXRob3JpdHk6IC9ldGMva3ViZXJuZXRlcy9zc2wvd29ya2VyLWNhLnBlbQogICAgc2VydmVyOiBodHRwczovL2FwaS5jNmZtZS5rOHMuZ2hvc3Qud2VzdGV1cm9wZS5henVyZS5naWdhbnRpYy5pbwpjb250ZXh0czoKLSBjb250ZXh0OgogICAgY2x1c3RlcjogbG9jYWwKICAgIHVzZXI6IHByb3h5CiAgbmFtZTogc2VydmljZS1hY2NvdW50LWNvbnRleHQKY3VycmVudC1jb250ZXh0OiBzZXJ2aWNlLWFjY291bnQtY29udGV4dAo=",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 420,
        "path": "/etc/kubernetes/kubeconfig/kube-proxy.yaml"
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,IyEvYmluL2Jhc2gKCiMgZXhhbXBsZS5jb20gaXMgdGhlcmUgdG8gbWl0aWdhdGUgQVdTIEROUyBpc3N1ZXMgd2hpY2ggYXQgc3RhcnR1cCBpcyBhYmxlIHRvCiMgcmVzb2x2ZSBpbnRlcm5hbCBBV1MgRE5TIG5hbWVzIGJ1dCBub3QgcHVibGljIEROUy4KZG9tYWlucz0iZXRjZC5jNmZtZS5rOHMuZ2hvc3Qud2VzdGV1cm9wZS5henVyZS5naWdhbnRpYy5pbyBhcGkuYzZmbWUuazhzLmdob3N0Lndlc3RldXJvcGUuYXp1cmUuZ2lnYW50aWMuaW8gZXhhbXBsZS5jb20iCgpmb3IgZG9tYWluIGluICRkb21haW5zOyBkbwp1bnRpbCBuc2xvb2t1cCAkZG9tYWluOyBkbwogICAgZWNobyAiV2FpdGluZyBmb3IgZG9tYWluICRkb21haW4gdG8gYmUgYXZhaWxhYmxlIgogICAgc2xlZXAgNQpkb25lCgplY2hvICJTdWNjZXNzZnVsbHkgcmVzb2x2ZWQgZG9tYWluICRkb21haW4iCmRvbmUK",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 356,
        "path": "/opt/wait-for-domains"
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,IyBVc2UgbW9zdCBkZWZhdWx0cyBmb3Igc3NoZCBjb25maWd1cmF0aW9uLgpTdWJzeXN0ZW0gc2Z0cCBpbnRlcm5hbC1zZnRwCkNsaWVudEFsaXZlSW50ZXJ2YWwgMTgwClVzZUROUyBubwpVc2VQQU0geWVzClByaW50TGFzdExvZyBubyAjIGhhbmRsZWQgYnkgUEFNClByaW50TW90ZCBubyAjIGhhbmRsZWQgYnkgUEFNCiMgTm9uIGRlZmF1bHRzICgjMTAwKQpDbGllbnRBbGl2ZUNvdW50TWF4IDIKUGFzc3dvcmRBdXRoZW50aWNhdGlvbiBubwpUcnVzdGVkVXNlckNBS2V5cyAvZXRjL3NzaC90cnVzdGVkLXVzZXItY2Eta2V5cy5wZW0KTWF4QXV0aFRyaWVzIDUKTG9naW5HcmFjZVRpbWUgNjAKQWxsb3dUY3BGb3J3YXJkaW5nIG5vCkFsbG93QWdlbnRGb3J3YXJkaW5nIG5vCg==",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 420,
        "path": "/etc/ssh/sshd_config"
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,IyEvYmluL2Jhc2gKZW52X2ZpbGU9Ii9ldGMva3ViZWxldC1lbnZpcm9ubWVudCIKCiMgc2V0IG1heCBwb2RzIHZhcmlhYmxlCk1BWF9QT0RTPTExMAplY2hvICJNQVhfUE9EUz0ke01BWF9QT0RTfSIgPj4gJHtlbnZfZmlsZX0K",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 356,
        "path": "/opt/bin/setup-kubelet-environment"
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,ZnMuaW5vdGlmeS5tYXhfdXNlcl93YXRjaGVzID0gMTYzODQKIyBEZWZhdWx0IGlzIDEyOCwgZG91YmxpbmcgZm9yIG5vZGVzIHdpdGggbWFueSBwb2RzCiMgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9naWFudHN3YXJtL2dpYW50c3dhcm0vaXNzdWVzLzc3MTEKZnMuaW5vdGlmeS5tYXhfdXNlcl9pbnN0YW5jZXMgPSA4MTkyCmtlcm5lbC5rcHRyX3Jlc3RyaWN0ID0gMgprZXJuZWwuc3lzcnEgPSAwCm5ldC5pcHY0LmNvbmYuYWxsLmxvZ19tYXJ0aWFucyA9IDEKbmV0LmlwdjQuY29uZi5hbGwuc2VuZF9yZWRpcmVjdHMgPSAwCm5ldC5pcHY0LmNvbmYuZGVmYXVsdC5hY2NlcHRfcmVkaXJlY3RzID0gMApuZXQuaXB2NC5jb25mLmRlZmF1bHQubG9nX21hcnRpYW5zID0gMQpuZXQuaXB2NC50Y3BfdGltZXN0YW1wcyA9IDAKbmV0LmlwdjYuY29uZi5hbGwuYWNjZXB0X3JlZGlyZWN0cyA9IDAKbmV0LmlwdjYuY29uZi5kZWZhdWx0LmFjY2VwdF9yZWRpcmVjdHMgPSAwCiMgSW5jcmVhc2VkIG1tYXBmcyBiZWNhdXNlIHNvbWUgYXBwbGljYXRpb25zLCBsaWtlIEVTLCBuZWVkIGhpZ2hlciBsaW1pdCB0byBzdG9yZSBkYXRhIHByb3Blcmx5CnZtLm1heF9tYXBfY291bnQgPSAyNjIxNDQKIyBSZXNlcnZlZCB0byBhdm9pZCBjb25mbGljdHMgd2l0aCBrdWJlLWFwaXNlcnZlciwgd2hpY2ggYWxsb2NhdGVzIHdpdGhpbiB0aGlzIHJhbmdlCm5ldC5pcHY0LmlwX2xvY2FsX3Jlc2VydmVkX3BvcnRzPTMwMDAwLTMyNzY3Cm5ldC5pcHY0LmNvbmYuYWxsLnJwX2ZpbHRlciA9IDEKbmV0LmlwdjQuY29uZi5hbGwuYXJwX2lnbm9yZSA9IDEKbmV0LmlwdjQuY29uZi5hbGwuYXJwX2Fubm91bmNlID0gMgo=",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 384,
        "path": "/etc/sysctl.d/hardening.conf"
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,LXcgL3Vzci9iaW4vZG9ja2VyIC1rIGRvY2tlcgotdyAvdmFyL2xpYi9kb2NrZXIgLWsgZG9ja2VyCi13IC9ldGMvZG9ja2VyIC1rIGRvY2tlcgotdyAvZXRjL3N5c3RlbWQvc3lzdGVtL2RvY2tlci5zZXJ2aWNlLmQvMTAtZ2lhbnRzd2FybS1leHRyYS1hcmdzLmNvbmYgLWsgZG9ja2VyCi13IC9ldGMvc3lzdGVtZC9zeXN0ZW0vZG9ja2VyLnNlcnZpY2UuZC8wMS13YWl0LWRvY2tlci5jb25mIC1rIGRvY2tlcgotdyAvdXNyL2xpYi9zeXN0ZW1kL3N5c3RlbS9kb2NrZXIuc2VydmljZSAtayBkb2NrZXIKLXcgL3Vzci9saWIvc3lzdGVtZC9zeXN0ZW0vZG9ja2VyLnNvY2tldCAtayBkb2NrZXIKCg==",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 384,
        "path": "/etc/audit/rules.d/10-docker.rules"
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,ewogICAgInJlZ2lzdHJ5LW1pcnJvcnMiOiBbCiAgICBdLAogICAgIm1ldHJpY3MtYWRkciIgOiAiMC4wLjAuMDo5MzIzIiwKICAgICJleHBlcmltZW50YWwiIDogdHJ1ZSwKICAgICJ1c2VybGFuZC1wcm94eSI6IGZhbHNlLAogICAgImxpdmUtcmVzdG9yZSI6IHRydWUsCiAgICAiaWNjIjogZmFsc2UKfQo=",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 420,
        "path": "/etc/docker/daemon.json"
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,aXBfdnMKaXBfdnNfcnIKaXBfdnNfd3JyCmlwX3ZzX3NoCm5mX2Nvbm50cmFja19pcHY0",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 384,
        "path": "/etc/modules-load.d/ip_vs.conf"
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,IyEvYmluL2Jhc2gKc2V0IC1ldW8gcGlwZWZhaWwKCmNvbnRhaW5lcj0kMQoKZG9ja2VyIGNwICIkY29udGFpbmVyIjovdXNyL2xvY2FsL2Jpbi9rdWJlbGV0IC9vcHQvYmluL2t1YmVsZXQKZG9ja2VyIGNwICIkY29udGFpbmVyIjovdXNyL2xvY2FsL2Jpbi9rdWJlY3RsIC9vcHQvYmluL2t1YmVjdGwK",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 356,
        "path": "/opt/k8s-extract"
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,Y2xvdWQ6IEFaVVJFUFVCTElDQ0xPVUQKdGVuYW50SWQ6IDEyMzQtYWJjZApzdWJzY3JpcHRpb25JZDogMTIzNC02Nzg5LTEyMzQtMDk4NzYKcmVzb3VyY2VHcm91cDogYzZmbWUKbG9jYXRpb246IHdlc3RldXJvcGUKYWFkQ2xpZW50SWQ6IDEyMzQKYWFkQ2xpZW50U2VjcmV0OiBhYmNkCmNsb3VkUHJvdmlkZXJCYWNrb2ZmOiB0cnVlCmNsb3VkUHJvdmlkZXJCYWNrb2ZmUmV0cmllczogNgpjbG91ZFByb3ZpZGVyQmFja29mZkppdHRlcjogMQpjbG91ZFByb3ZpZGVyQmFja29mZkR1cmF0aW9uOiA2CmNsb3VkUHJvdmlkZXJCYWNrb2ZmRXhwb25lbnQ6IDEuNQpjbG91ZFByb3ZpZGVyUmF0ZUxpbWl0OiB0cnVlCmNsb3VkUHJvdmlkZXJSYXRlTGltaXRRUFM6IDMKY2xvdWRQcm92aWRlclJhdGVMaW1pdEJ1Y2tldDogMTAKY2xvdWRQcm92aWRlclJhdGVMaW1pdFFQU1dyaXRlOiAzCmNsb3VkUHJvdmlkZXJSYXRlTGltaXRCdWNrZXRXcml0ZTogMTAKcHJpbWFyeVNjYWxlU2V0TmFtZTogbm9kZXBvb2wtbm9wbzEKc3VibmV0TmFtZTogbm9wbzEKc2VjdXJpdHlHcm91cE5hbWU6IGM2Zm1lLVdvcmtlclNlY3VyaXR5R3JvdXAKdm5ldE5hbWU6IGM2Zm1lLVZpcnR1YWxOZXR3b3JrCnZtVHlwZTogdm1zcwpyb3V0ZVRhYmxlTmFtZTogYzZmbWUtUm91dGVUYWJsZQp1c2VNYW5hZ2VkSWRlbnRpdHlFeHRlbnNpb246IGZhbHNlCmxvYWRCYWxhbmNlclNrdTogc3RhbmRhcmQK",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 416,
        "group": {
          "id": 65534
        },
        "path": "/etc/kubernetes/config/azure.yaml",
        "user": {
          "name": "root"
        }
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 256,
        "group": {
          "name": "root"
        },
        "path": "/etc/kubernetes/ssl/worker-ca.pem.enc",
        "user": {
          "name": "root"
        }
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 256,
        "group": {
          "name": "root"
        },
        "path": "/etc/kubernetes/ssl/worker-crt.pem.enc",
        "user": {
          "name": "root"
        }
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 256,
        "group": {
          "name": "root"
        },
        "path": "/etc/kubernetes/ssl/worker-key.pem.enc",
        "user": {
          "name": "root"
        }
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 256,
        "group": {
          "name": "root"
        },
        "path": "/etc/kubernetes/ssl/calico/etcd-ca.enc",
        "user": {
          "name": "root"
        }
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 256,
        "group": {
          "name": "root"
        },
        "path": "/etc/kubernetes/ssl/calico/etcd-cert.enc",
        "user": {
          "name": "root"
        }
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 256,
        "group": {
          "name": "root"
        },
        "path": "/etc/kubernetes/ssl/calico/etcd-key.enc",
        "user": {
          "name": "root"
        }
      }
    ]
  },
  "systemd": {
    "units": [
      {
        "name": "kubereserved.slice"
      },
      {
        "contents": "[Unit]\nDescription=Setup iptables Nat rules for Azure CNI\nWants=systemd-networkd.service\nAfter=systemd-networkd.service\nBefore=docker.service\n[Service]\nType=oneshot\nExecStartPre=/bin/sh -c \"iptables -I INPUT 1 -m udp -p udp --source-port 80 -j DROP\"\nExecStartPre=/bin/sh -c \"iptables -I INPUT 1 -m udp -p udp --source-port 443 -j DROP\"\nExecStart=/bin/sh -c \"iptables -t nat -A POSTROUTING -m addrtype ! --dst-type local ! -d 10.10.0.0/16 -j MASQUERADE\"\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "azure-cni-nat-rules.service"
      },
      {
        "contents": "[Unit]\nDescription=Certificate Decrypter\nWants=k8s-setup-network-env.service\nAfter=k8s-setup-network-env.service\nBefore=k8s-kubelet.service etcd3.service\n[Service]\nType=oneshot\nEnvironmentFile=/etc/.enc/key\nEnvironmentFile=/etc/.enc/iv\nExecStart=/bin/sh -c \"\\\nopenssl enc -aes-256-cfb -d -K ${ENCRYPTION_KEY} -iv ${INITIAL_VECTOR} -in /etc/kubernetes/ssl/worker-ca.pem.enc -out /etc/kubernetes/ssl/worker-ca.pem ; \\\nopenssl enc -aes-256-cfb -d -K ${ENCRYPTION_KEY} -iv ${INITIAL_VECTOR} -in /etc/kubernetes/ssl/worker-crt.pem.enc -out /etc/kubernetes/ssl/worker-crt.pem ; \\\nopenssl enc -aes-256-cfb -d -K ${ENCRYPTION_KEY} -iv ${INITIAL_VECTOR} -in /etc/kubernetes/ssl/worker-key.pem.enc -out /etc/kubernetes/ssl/worker-key.pem ; \\\nopenssl enc -aes-256-cfb -d -K ${ENCRYPTION_KEY} -iv ${INITIAL_VECTOR} -in /etc/kubernetes/ssl/calico/etcd-ca.enc -out /etc/kubernetes/ssl/calico/etcd-ca ; \\\nopenssl enc -aes-256-cfb -d -K ${ENCRYPTION_KEY} -iv ${INITIAL_VECTOR} -in /etc/kubernetes/ssl/calico/etcd-cert.enc -out /etc/kubernetes/ssl/calico/etcd-cert ; \\\nopenssl enc -aes-256-cfb -d -K ${ENCRYPTION_KEY} -iv ${INITIAL_VECTOR} -in /etc/kubernetes/ssl/calico/etcd-key.enc -out /etc/kubernetes/ssl/calico/etcd-key ; \\\n\"\n [Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "certificate-decrypter.service"
      },
      {
        "contents": "[Unit]\nDescription=Mounts disk to /var/lib/docker\nBefore=docker.service\n\n[Mount]\nWhat=/dev/disk/by-label/docker\nWhere=/var/lib/docker\nType=xfs\n\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "var-lib-docker.mount"
      },
      {
        "contents": "[Unit]\nDescription=Mounts disk to /var/lib/kubelet\nBefore=k8s-kubelet.service\n\n[Mount]\nWhat=/dev/disk/by-label/kubelet\nWhere=/var/lib/kubelet\nType=xfs\n\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "var-lib-kubelet.mount"
      },
      {
        "contents": "[Unit]\nDescription=VNIC configuration\nWants=systemd-networkd.service\nAfter=systemd-networkd.service\nBefore=docker.service\n[Service]\nType=oneshot\nExecStart=/bin/sh -c \"ethtool -G eth0 tx 1024\"\n [Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "vnic-configuration.service"
      },
      {
        "contents": "[Unit]\nDescription=Change group owner for certificates to giantswarm\nWants=k8s-kubelet.service k8s-setup-network-env.service\nAfter=k8s-kubelet.service k8s-setup-network-env.service\n[Service]\nType=oneshot\nExecStart=/bin/sh -c \"find /etc/kubernetes/ssl -name '*.pem' -print | xargs -i  sh -c 'chown root:giantswarm {} \u0026\u0026 chmod 640 {}'\"\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "set-certs-group-owner-permission-giantswarm.service"
      },
      {
        "contents": "[Unit]\nDescription=Wait for etcd and k8s API domains to be available\n[Service]\nType=oneshot\nExecStart=/opt/wait-for-domains\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "wait-for-domains.service"
      },
      {
        "contents": "[Unit]\nDescription=Apply os hardening\n[Service]\nType=oneshot\nExecStartPre=-/bin/bash -c \"gpasswd -d core rkt; gpasswd -d core docker; gpasswd -d core wheel\"\nExecStartPre=/bin/bash -c \"until [ -f '/etc/sysctl.d/hardening.conf' ]; do echo Waiting for sysctl file; sleep 1s;done;\"\nExecStart=/usr/sbin/sysctl -p /etc/sysctl.d/hardening.conf\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "os-hardening.service"
      },
      {
        "contents": "[Unit]\nDescription=k8s-setup-kubelet-environment Service\nAfter=k8s-setup-network-env.service docker.service\nRequires=k8s-setup-network-env.service docker.service\n[Service]\nType=oneshot\nRemainAfterExit=yes\nTimeoutStartSec=0\nExecStart=/opt/bin/setup-kubelet-environment worker\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "k8s-setup-kubelet-environment.service"
      },
      {
        "contents": "[Unit]\nDescription=k8s-setup-kubelet-config Service\nAfter=k8s-setup-network-env.service docker.service k8s-setup-kubelet-environment.service\nRequires=k8s-setup-network-env.service docker.service k8s-setup-kubelet-environment.service\n[Service]\nType=oneshot\nRemainAfterExit=yes\nTimeoutStartSec=0\nEnvironmentFile=/etc/network-environment\nEnvironmentFile=/etc/kubelet-environment\nExecStart=/bin/bash -c '/usr/bin/envsubst \u003c/etc/kubernetes/config/kubelet.yaml.tmpl \u003e/etc/kubernetes/config/kubelet.yaml'\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "k8s-setup-kubelet-config.service"
      },
      {
        "dropins": [
          {
            "contents": "[Service]\nCPUAccounting=true\nMemoryAccounting=true\nSlice=kubereserved.slice\n",
            "name": "10-change-cgroup.conf"
          }
        ],
        "enabled": true,
        "name": "containerd.service"
      },
      {
        "dropins": [
          {
            "contents": "[Service]\nCPUAccounting=true\nMemoryAccounting=true\nSlice=kubereserved.slice\nEnvironment=\"DOCKER_CGROUPS=--exec-opt native.cgroupdriver=cgroupfs --cgroup-parent=/kubereserved.slice --log-opt max-size=25m --log-opt max-file=2 --log-opt labels=io.kubernetes.container.hash,io.kubernetes.container.name,io.kubernetes.pod.name,io.kubernetes.pod.namespace,io.kubernetes.pod.uid\"\nEnvironment=\"DOCKER_OPT_BIP=--bip=\"\n",
            "name": "10-giantswarm-extra-args.conf"
          }
        ],
        "enabled": true,
        "name": "docker.service"
      },
      {
        "contents": "[Unit]\nDescription=k8s-setup-network-env Service\nWants=network.target docker.service wait-for-domains.service\nAfter=network.target docker.service wait-for-domains.service\n[Service]\nType=oneshot\nTimeoutStartSec=0\nEnvironment=\"IMAGE=quay.io/giantswarm/k8s-setup-network-environment:0.2.0\"\nEnvironment=\"NAME=%p.service\"\nExecStartPre=/usr/bin/mkdir -p /opt/bin/\nExecStartPre=/usr/bin/docker pull $IMAGE\nExecStartPre=-/usr/bin/docker stop -t 10 $NAME\nExecStartPre=-/usr/bin/docker rm -f $NAME\nExecStart=/usr/bin/docker run --rm --net=host -v /etc:/etc --name $NAME $IMAGE\nExecStop=-/usr/bin/docker stop -t 10 $NAME\nExecStopPost=-/usr/bin/docker rm -f $NAME\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "k8s-setup-network-env.service"
      },
      {
        "contents": "[Unit]\nDescription=k8s-extract Service\nAfter=docker.service\nRequires=docker.service\n[Service]\nType=oneshot\nRemainAfterExit=yes\nTimeoutStartSec=0\nEnvironment=IMAGE=quay.io/giantswarm/hyperkube:v1.17.9\nEnvironment=CONTAINER_NAME=%p.service\nExecStartPre=/usr/bin/mkdir -p /opt/bin/\nExecStartPre=/usr/bin/docker pull $IMAGE\nExecStartPre=-/usr/bin/docker rm $CONTAINER_NAME\nExecStartPre=-/usr/bin/docker create --name $CONTAINER_NAME $IMAGE\nExecStart=/opt/k8s-extract $CONTAINER_NAME\nExecStopPost=-/usr/bin/docker rm $CONTAINER_NAME\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "k8s-extract.service"
      },
      {
        "contents": "[Unit]\nWants=k8s-setup-network-env.service k8s-setup-kubelet-config.service k8s-extract.service rpc-statd.service\nAfter=k8s-setup-network-env.service k8s-setup-kubelet-config.service k8s-extract.service rpc-statd.service\nDescription=k8s-kubelet\nStartLimitIntervalSec=0\n[Service]\nTimeoutStartSec=300\nRestart=always\nRestartSec=0\nTimeoutStopSec=10\nSlice=kubereserved.slice\nCPUAccounting=true\nMemoryAccounting=true\nEnvironment=\"ETCD_CA_CERT_FILE=/etc/kubernetes/ssl/etcd/client-ca.pem\"\nEnvironment=\"ETCD_CERT_FILE=/etc/kubernetes/ssl/etcd/client-crt.pem\"\nEnvironment=\"ETCD_KEY_FILE=/etc/kubernetes/ssl/etcd/client-key.pem\"\nEnvironmentFile=/etc/network-environment\nExecStart=/opt/bin/kubelet \\\n  --cloud-config=/etc/kubernetes/config/azure.yaml \\\n  --node-ip=${DEFAULT_IPV4} \\\n  --config=/etc/kubernetes/config/kubelet.yaml \\\n  --enable-server \\\n  --logtostderr=true \\\n  --cloud-provider=azure \\\n  --pod-infra-container-image=quay.io/giantswarm/pause:3.2 \\\n  --image-pull-progress-deadline=1m \\\n  --network-plugin=cni \\\n  --register-node=true \\\n  --kubeconfig=/etc/kubernetes/kubeconfig/kubelet.yaml \\\n  --node-labels=\"node.kubernetes.io/worker,role=worker,ip=${DEFAULT_IPV4},giantswarm.io/provider=azure,azure-operator.giantswarm.io/version=4.2.0,giantswarm.io/machine-pool=nopo1\" \\\n  --v=2 \\\n  --runtime-cgroups=/kubereserved.slice\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "k8s-kubelet.service"
      },
      {
        "contents": "[Unit]\nDescription=Adds labels to the node after kubelet startup\nAfter=k8s-kubelet.service\nWants=k8s-kubelet.service\n[Service]\nType=oneshot\nRemainAfterExit=yes\nEnvironment=\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/opt/bin\"\nEnvironment=\"KUBECONFIG=/etc/kubernetes/kubeconfig/kubelet.yaml\"\nExecStart=/bin/sh -c '\\\n  while [ \"$(kubectl get nodes $(hostname | tr '[:upper:]' '[:lower:]')| wc -l)\" -lt \"1\" ]; do echo \"Waiting for healthy k8s\" \u0026\u0026 sleep 20s;done; \\\n  kubectl label nodes --overwrite $(hostname | tr '[:upper:]' '[:lower:]') node-role.kubernetes.io/worker=\"\"; \\\n  kubectl label nodes --overwrite $(hostname | tr '[:upper:]' '[:lower:]') kubernetes.io/role=worker'\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "k8s-label-node.service"
      },
      {
        "enabled": false,
        "mask": true,
        "name": "etcd2.service"
      },
      {
        "enabled": false,
        "mask": true,
        "name": "update-engine.service"
      },
      {
        "enabled": false,
        "mask": true,
        "name": "locksmithd.service"
      },
      {
        "enabled": false,
        "mask": true,
        "name": "fleet.service"
      },
      {
        "enabled": false,
        "mask": true,
        "name": "fleet.socket"
      },
      {
        "enabled": false,
        "mask": true,
        "name": "flanneld.service"
      },
      {
        "enabled": false,
        "mask": true,
        "name": "systemd-networkd-wait-online.service"
      }
    ]
  }
}

kind: Secret
metadata:
  creationTimestamp: null
  name: nopo1-machine-pool-ignition
  namespace: default
  ownerReferences:
  - apiVersion: core.giantswarm.io/v1alpha1
    blockOwnerDeletion: true
    kind: Spark
    name: nopo1
    uid: ""
  resourceVersion: "1"
