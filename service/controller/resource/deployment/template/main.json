{
  "$schema":"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion":"1.0.0.0",
  "parameters":{
    "blobContainerName":{
      "type":"string",
      "metadata":{
        "description":"Container name for the ignition."
      }
    },
    "clusterID":{
      "type":"string",
      "metadata":{
        "description":"Unique ID of this guest cluster."
      }
    },
    "controlPlaneWorkerSubnetID":{
      "type":"string",
      "metadata":{
        "description":"ID of the control plane 'worker' subnet."
      }
    },
    "GiantSwarmTags":{
      "type":"object",
      "defaultValue":{
        "provider":"F80D01C0-7AAC-4440-98F6-5061511962AD"
      }
    },
    "initialProvisioning":{
      "type":"string",
      "defaultValue":"Yes",
      "metadata":{
        "description":"Whether the deployment is provisioned the very first time."
      }
    },
    "storageAccountName":{
      "type":"string",
      "metadata":{
        "description":"Storage account name for the ignition."
      }
    },
    "virtualNetworkName":{
      "type":"string",
      "metadata":{
        "description":"Virtual network's name of the guest cluster"
      }
    },
    "virtualNetworkCidr":{
      "type":"string",
      "metadata":{
        "description":"The main CIDR block reserved for this virtual network."
      }
    },
    "vnetGatewaySubnetName": {
      "type":"string"
    },
    "calicoSubnetCidr":{
      "type":"string"
    },
    "masterSubnetCidr":{
      "type":"string"
    },
    "workerSubnetCidr":{
      "type":"string"
    },
    "vpnSubnetCidr":{
      "type":"string"
    },
    "hostClusterCidr":{
      "type":"string"
    },
    "kubernetesAPISecurePort":{
      "type":"int"
    },
    "dnsZones":{
      "type":"object",
      "metadata":{
        "description":"The DNS zones for kubernetes api and ingress."
      }
    },
    "insecureStorageAccount":{
      "type":"bool",
      "defaultValue": false
    }
  },
  "variables":{
    "masterPrefix":"Master",
    "workerPrefix":"Worker"
  },
  "resources":[
    {
      "apiVersion":"2016-09-01",
      "name":"security_groups_setup",
      "type":"Microsoft.Resources/deployments",
      "properties":{
        "expressionEvaluationOptions":{
          "scope": "inner"
        },
        "mode":"incremental",
        "template":{
          "$schema":"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion":"1.0.0.0",
          "parameters":{
            "networkSecurityGroupsAPIVersion":{
              "type":"string",
              "defaultValue":"2016-09-01",
              "metadata":{
                "description":"API version used by the Microsoft.Network/networkSecurityGroups resource."
              }
            },
            "clusterID":{
              "type":"string"
            },
            "GiantSwarmTags":{
              "type":"object",
              "defaultValue":{
                "provider":"F80D01C0-7AAC-4440-98F6-5061511962AD"
              }
            },
            "initialProvisioning":{
              "type":"string",
              "defaultValue":"Yes",
              "metadata":{
                "description":"Whether the deployment is provisioned the very first time."
              }
            },
            "virtualNetworkCidr":{
              "type":"string"
            },
            "calicoSubnetCidr":{
              "type":"string"
            },
            "masterSubnetCidr":{
              "type":"string"
            },
            "workerSubnetCidr":{
              "type":"string"
            },
            "hostClusterCidr":{
              "type":"string"
            },
            "kubernetesAPISecurePort":{
              "type":"int"
            },
            "mastersNatGWPublicIP":{
              "type":"string"
            }
          },
          "variables":{
            "masterSecurityGroupName":"[concat(parameters('clusterID'), '-MasterSecurityGroup')]",
            "masterSecurityGroupID":"[resourceId('Microsoft.Network/networkSecurityGroups', variables('masterSecurityGroupName'))]",
            "workerSecurityGroupName":"[concat(parameters('clusterID'), '-WorkerSecurityGroup')]",
            "workerSecurityGroupID":"[resourceId('Microsoft.Network/networkSecurityGroups', variables('workerSecurityGroupName'))]",
            "cadvisorPort":"4194",
            "etcdPort":"2379",
            "kubeletPort":"10250",
            "nodeExporterPort":"10300",
            "kubeStateMetricsPort":"10301"
          },
          "resources":[
            {
              "type":"Microsoft.Network/networkSecurityGroups",
              "name":"[variables('masterSecurityGroupName')]",
              "apiVersion":"[parameters('networkSecurityGroupsAPIVersion')]",
              "location":"[resourceGroup().location]",
              "tags":{
                "provider":"[toUpper(parameters('GiantSwarmTags').provider)]"
              },
              "properties":{
                "securityRules":[
                  {
                    "name":"defaultInboundRule",
                    "properties":{
                      "description":"Default rule that denies any inbound traffic.",
                      "protocol":"*",
                      "sourcePortRange":"*",
                      "destinationPortRange":"*",
                      "sourceAddressPrefix":"*",
                      "destinationAddressPrefix":"*",
                      "access":"Deny",
                      "direction":"Inbound",
                      "priority":"4096"
                    }
                  },
                  {
                    "name":"defaultOutboundRule",
                    "properties":{
                      "description":"Default rule that allows any outbound traffic.",
                      "protocol":"*",
                      "sourcePortRange":"*",
                      "destinationPortRange":"*",
                      "sourceAddressPrefix":"*",
                      "destinationAddressPrefix":"*",
                      "access":"Allow",
                      "direction":"Outbound",
                      "priority":"4095"
                    }
                  },
                  {
                    "name":"defaultInClusterRule",
                    "properties":{
                      "description":"Default rule that allows any traffic within the master subnet.",
                      "protocol":"*",
                      "sourcePortRange":"*",
                      "destinationPortRange":"*",
                      "sourceAddressPrefix":"[parameters('masterSubnetCidr')]",
                      "destinationAddressPrefix":"[parameters('virtualNetworkCidr')]",
                      "access":"Allow",
                      "direction":"Inbound",
                      "priority":"4094"
                    }
                  },
                  {
                    "name":"sshHostClusterToMasterSubnetRule",
                    "properties":{
                      "description":"Allow the host cluster machines to reach this guest cluster master subnet.",
                      "protocol":"*",
                      "sourcePortRange":"*",
                      "destinationPortRange":"22",
                      "sourceAddressPrefix":"[parameters('hostClusterCidr')]",
                      "destinationAddressPrefix":"[parameters('masterSubnetCidr')]",
                      "access":"Allow",
                      "direction":"Inbound",
                      "priority":"4093"
                    }
                  },
                  {
                    "name":"apiLoadBalancerRule",
                    "properties":{
                      "description":"Allow anyone to reach the kubernetes API.",
                      "protocol":"tcp",
                      "sourcePortRange":"*",
                      "destinationPortRange":"[string(parameters('kubernetesAPISecurePort'))]",
                      "sourceAddressPrefix":"*",
                      "destinationAddressPrefix":"[parameters('masterSubnetCidr')]",
                      "access":"Allow",
                      "direction":"Inbound",
                      "priority":"3903"
                    }
                  },
                  {
                    "name":"allowLoadBalancer",
                    "properties":{
                      "description":"Allow all TCP traffic from LB to master instance.",
                      "protocol":"tcp",
                      "sourcePortRange":"*",
                      "destinationPortRange":"*",
                      "sourceAddressPrefix":"AzureLoadBalancer",
                      "destinationAddressPrefix":"[parameters('masterSubnetCidr')]",
                      "access":"Allow",
                      "direction":"Inbound",
                      "priority":"3902"
                    }
                  },
                  {
                    "name":"etcdLoadBalancerRuleHost",
                    "properties":{
                      "description":"Allow host cluster to reach the etcd loadbalancer.",
                      "protocol":"tcp",
                      "sourcePortRange":"*",
                      "destinationPortRange":"[variables('etcdPort')]",
                      "sourceAddressPrefix":"[parameters('hostClusterCidr')]",
                      "destinationAddressPrefix":"[parameters('masterSubnetCidr')]",
                      "access":"Allow",
                      "direction":"Inbound",
                      "priority":"3901"
                    }
                  },
                  {
                    "name":"etcdLoadBalancerRuleCluster",
                    "properties":{
                      "description":"Allow cluster subnet to reach the etcd loadbalancer.",
                      "protocol":"tcp",
                      "sourcePortRange":"*",
                      "destinationPortRange":"[variables('etcdPort')]",
                      "sourceAddressPrefix":"[parameters('virtualNetworkCidr')]",
                      "destinationAddressPrefix":"[parameters('masterSubnetCidr')]",
                      "access":"Allow",
                      "direction":"Inbound",
                      "priority":"3900"
                    }
                  },
                  {
                    "name":"etcdLoadBalancerRuleMasters",
                    "properties":{
                      "description":"Allow master nodes the etcd loadbalancer via the public IP.",
                      "protocol":"tcp",
                      "sourcePortRange":"*",
                      "destinationPortRange":"[variables('etcdPort')]",
                      "sourceAddressPrefix":"[parameters('mastersNatGWPublicIP')]",
                      "destinationAddressPrefix":"[parameters('masterSubnetCidr')]",
                      "access":"Allow",
                      "direction":"Inbound",
                      "priority":"3899"
                    }
                  },
                  {
                    "name":"allowWorkerSubnet",
                    "properties":{
                      "description":"Allow the worker machines to reach the master machines on any ports.",
                      "protocol":"*",
                      "sourcePortRange":"*",
                      "destinationPortRange":"*",
                      "sourceAddressPrefix":"[parameters('workerSubnetCidr')]",
                      "destinationAddressPrefix":"[parameters('virtualNetworkCidr')]",
                      "access":"Allow",
                      "direction":"Inbound",
                      "priority":"3800"
                    }
                  },
                  {
                    "name":"allowCalicoSubnet",
                    "properties":{
                      "description":"Allow pods to reach the master machines on any ports.",
                      "protocol":"*",
                      "sourcePortRange":"*",
                      "destinationPortRange":"*",
                      "sourceAddressPrefix":"[parameters('calicoSubnetCidr')]",
                      "destinationAddressPrefix":"[parameters('virtualNetworkCidr')]",
                      "access":"Allow",
                      "direction":"Inbound",
                      "priority":"3700"
                    }
                  },
                  {
                    "name":"allowCadvisor",
                    "properties":{
                      "description":"Allow host cluster Prometheus to reach Cadvisors.",
                      "protocol":"tcp",
                      "sourcePortRange":"*",
                      "destinationPortRange":"[variables('cadvisorPort')]",
                      "sourceAddressPrefix":"[parameters('hostClusterCidr')]",
                      "destinationAddressPrefix":"[parameters('masterSubnetCidr')]",
                      "access":"Allow",
                      "direction":"Inbound",
                      "priority":"3500"
                    }
                  },
                  {
                    "name":"allowKubelet",
                    "properties":{
                      "description":"Allow host cluster Prometheus to reach Kubelets.",
                      "protocol":"tcp",
                      "sourcePortRange":"*",
                      "destinationPortRange":"[variables('kubeletPort')]",
                      "sourceAddressPrefix":"[parameters('hostClusterCidr')]",
                      "destinationAddressPrefix":"[parameters('masterSubnetCidr')]",
                      "access":"Allow",
                      "direction":"Inbound",
                      "priority":"3501"
                    }
                  },
                  {
                    "name":"allowNodeExporter",
                    "properties":{
                      "description":"Allow host cluster Prometheus to reach node-exporters.",
                      "protocol":"tcp",
                      "sourcePortRange":"*",
                      "destinationPortRange":"[variables('nodeExporterPort')]",
                      "sourceAddressPrefix":"[parameters('hostClusterCidr')]",
                      "destinationAddressPrefix":"[parameters('masterSubnetCidr')]",
                      "access":"Allow",
                      "direction":"Inbound",
                      "priority":"3502"
                    }
                  }
                ]
              }
            },
            {
              "type":"Microsoft.Network/networkSecurityGroups",
              "name":"[variables('workerSecurityGroupName')]",
              "condition":"[equals(parameters('initialProvisioning'), 'Yes')]",
              "apiVersion":"[parameters('networkSecurityGroupsAPIVersion')]",
              "location":"[resourceGroup().location]",
              "tags":{
                "provider":"[toUpper(parameters('GiantSwarmTags').provider)]"
              },
              "properties":{
                "securityRules":[
                  {
                    "name":"defaultInboundRule",
                    "properties":{
                      "description":"Default rule that denies any inbound traffic.",
                      "protocol":"*",
                      "sourcePortRange":"*",
                      "destinationPortRange":"*",
                      "sourceAddressPrefix":"*",
                      "destinationAddressPrefix":"*",
                      "access":"Deny",
                      "direction":"Inbound",
                      "priority":"4096"
                    }
                  },
                  {
                    "name":"defaultOutboundRule",
                    "properties":{
                      "description":"Default rule that allows any outbound traffic.",
                      "protocol":"*",
                      "sourcePortRange":"*",
                      "destinationPortRange":"*",
                      "sourceAddressPrefix":"*",
                      "destinationAddressPrefix":"*",
                      "access":"Allow",
                      "direction":"Outbound",
                      "priority":"4095"
                    }
                  },
                  {
                    "name":"defaultInClusterRule",
                    "properties":{
                      "description":"Default rule that allows any traffic within the worker subnet.",
                      "protocol":"*",
                      "sourcePortRange":"*",
                      "destinationPortRange":"*",
                      "sourceAddressPrefix":"[parameters('workerSubnetCidr')]",
                      "destinationAddressPrefix":"[parameters('virtualNetworkCidr')]",
                      "access":"Allow",
                      "direction":"Inbound",
                      "priority":"4094"
                    }
                  },
                  {
                    "name":"sshHostClusterToWorkerSubnetRule",
                    "properties":{
                      "description":"Allow the host cluster machines to reach this guest cluster worker subnet.",
                      "protocol":"*",
                      "sourcePortRange":"*",
                      "destinationPortRange":"22",
                      "sourceAddressPrefix":"[parameters('hostClusterCidr')]",
                      "destinationAddressPrefix":"[parameters('workerSubnetCidr')]",
                      "access":"Allow",
                      "direction":"Inbound",
                      "priority":"4093"
                    }
                  },
                  {
                    "name":"azureLoadBalancerHealthChecks",
                    "properties":{
                      "description":"Allow Azure Load Balancer health checks.",
                      "protocol":"*",
                      "sourcePortRange":"*",
                      "destinationPortRange":"*",
                      "sourceAddressPrefix":"AzureLoadBalancer",
                      "destinationAddressPrefix":"*",
                      "access":"Allow",
                      "direction":"Inbound",
                      "priority":"4000"
                    }
                  },
                  {
                    "name":"allowMasterSubnet",
                    "properties":{
                      "description":"Allow the master machines to reach the worker machines on any ports.",
                      "protocol":"*",
                      "sourcePortRange":"*",
                      "destinationPortRange":"*",
                      "sourceAddressPrefix":"[parameters('masterSubnetCidr')]",
                      "destinationAddressPrefix":"[parameters('virtualNetworkCidr')]",
                      "access":"Allow",
                      "direction":"Inbound",
                      "priority":"3700"
                    }
                  },
                  {
                    "name":"allowCalicoSubnet",
                    "properties":{
                      "description":"Allow pods to reach the worker machines on any ports.",
                      "protocol":"*",
                      "sourcePortRange":"*",
                      "destinationPortRange":"*",
                      "sourceAddressPrefix":"[parameters('calicoSubnetCidr')]",
                      "destinationAddressPrefix":"[parameters('virtualNetworkCidr')]",
                      "access":"Allow",
                      "direction":"Inbound",
                      "priority":"3600"
                    }
                  },
                  {
                    "name":"allowCadvisor",
                    "properties":{
                      "description":"Allow host cluster Prometheus to reach Cadvisors.",
                      "protocol":"tcp",
                      "sourcePortRange":"*",
                      "destinationPortRange":"[variables('cadvisorPort')]",
                      "sourceAddressPrefix":"[parameters('hostClusterCidr')]",
                      "destinationAddressPrefix":"[parameters('workerSubnetCidr')]",
                      "access":"Allow",
                      "direction":"Inbound",
                      "priority":"3500"
                    }
                  },
                  {
                    "name":"allowKubelet",
                    "properties":{
                      "description":"Allow host cluster Prometheus to reach Kubelets.",
                      "protocol":"tcp",
                      "sourcePortRange":"*",
                      "destinationPortRange":"[variables('kubeletPort')]",
                      "sourceAddressPrefix":"[parameters('hostClusterCidr')]",
                      "destinationAddressPrefix":"[parameters('workerSubnetCidr')]",
                      "access":"Allow",
                      "direction":"Inbound",
                      "priority":"3501"
                    }
                  },
                  {
                    "name":"allowNodeExporter",
                    "properties":{
                      "description":"Allow host cluster Prometheus to reach node-exporters.",
                      "protocol":"tcp",
                      "sourcePortRange":"*",
                      "destinationPortRange":"[variables('nodeExporterPort')]",
                      "sourceAddressPrefix":"[parameters('hostClusterCidr')]",
                      "destinationAddressPrefix":"[parameters('workerSubnetCidr')]",
                      "access":"Allow",
                      "direction":"Inbound",
                      "priority":"3502"
                    }
                  },
                  {
                    "name":"allowKubeStateMetrics",
                    "properties":{
                      "description":"Allow host cluster Prometheus to reach kube-state-metrics.",
                      "protocol":"tcp",
                      "sourcePortRange":"*",
                      "destinationPortRange":"[variables('kubeStateMetricsPort')]",
                      "sourceAddressPrefix":"[parameters('hostClusterCidr')]",
                      "destinationAddressPrefix":"[parameters('workerSubnetCidr')]",
                      "access":"Allow",
                      "direction":"Inbound",
                      "priority":"3503"
                    }
                  }
                ]
              }
            }
          ],
          "outputs":{
            "masterSecurityGroupID":{
              "type":"string",
              "value":"[variables('masterSecurityGroupID')]"
            },
            "workerSecurityGroupID":{
              "type":"string",
              "value":"[variables('workerSecurityGroupID')]"
            }
          }
        },
        "parameters":{
          "clusterID":{
            "value":"[parameters('clusterID')]"
          },
          "GiantSwarmTags":{
            "value":"[parameters('GiantSwarmTags')]"
          },
          "virtualNetworkCidr":{
            "value":"[parameters('virtualNetworkCidr')]"
          },
          "calicoSubnetCidr":{
            "value":"[parameters('calicoSubnetCidr')]"
          },
          "masterSubnetCidr":{
            "value":"[parameters('masterSubnetCidr')]"
          },
          "workerSubnetCidr":{
            "value":"[parameters('workerSubnetCidr')]"
          },
          "hostClusterCidr":{
            "value":"[parameters('hostClusterCidr')]"
          },
          "kubernetesAPISecurePort":{
            "value":"[parameters('kubernetesAPISecurePort')]"
          },
          "initialProvisioning":{
            "value":"[parameters('initialProvisioning')]"
          },
          "mastersNatGWPublicIP":{
            "value":"[reference('masters_nat_gw').outputs.mastersNatGWPublicIP.value]"
          }
        }
      }
    },
    {
      "apiVersion":"2016-09-01",
      "name":"route_table_setup",
      "type":"Microsoft.Resources/deployments",
      "properties":{
        "expressionEvaluationOptions":{
          "scope": "inner"
        },
        "mode":"incremental",
        "template":{
          "$schema":"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion":"1.0.0.0",
          "parameters":{
            "clusterID":{
              "type":"string"
            },
            "GiantSwarmTags":{
              "type":"object",
              "defaultValue":{
                "provider":"F80D01C0-7AAC-4440-98F6-5061511962AD"
              }
            },
            "initialProvisioning":{
              "type":"string",
              "defaultValue":"Yes",
              "metadata":{
                "description":"Whether the deployment is provisioned the very first time."
              }
            },
            "routeTablesAPIVersion":{
              "type":"string",
              "defaultValue":"2016-09-01",
              "metadata":{
                "description":"API version used by the Microsoft.Network/routeTables resource."
              }
            }
          },
          "variables":{
            "name":"[concat(parameters('clusterID'), '-RouteTable')]",
            "id":"[resourceId('Microsoft.Network/routeTables', variables('name'))]"
          },
          "resources":[
            {
              "type":"Microsoft.Network/routeTables",
              "name":"[variables('name')]",
              "condition":"[equals(parameters('initialProvisioning'), 'Yes')]",
              "apiVersion":"[parameters('routeTablesAPIVersion')]",
              "location":"[resourceGroup().location]",
              "tags":{
                "provider":"[toUpper(parameters('GiantSwarmTags').provider)]"
              }
            }
          ],
          "outputs":{
            "name":{
              "type":"string",
              "value":"[variables('name')]"
            },
            "id":{
              "type":"string",
              "value":"[variables('id')]"
            }
          }
        },
        "parameters":{
          "clusterID":{
            "value":"[parameters('clusterID')]"
          },
          "GiantSwarmTags":{
            "value":"[parameters('GiantSwarmTags')]"
          },
          "initialProvisioning":{
            "value":"[parameters('initialProvisioning')]"
          }
        }
      }
    },
    {
      "apiVersion":"2016-09-01",
      "name":"workers_nat_gw",
      "type":"Microsoft.Resources/deployments",
      "dependsOn":[],
      "properties":{
        "expressionEvaluationOptions":{
          "scope": "inner"
        },
        "mode":"incremental",
        "template":{
          "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "publicIPAddressesAPIVersion": {
              "defaultValue": "2018-12-01",
              "type": "String",
              "metadata": {
                "description": "API version used by the Microsoft.Network/publicIPAddresses resource."
              }
            },
            "natGWApiVersion": {
              "type": "string",
              "defaultValue":"2019-09-01",
              "metadata":{
                "description":"API version used by the Microsoft.Network/natGateways resource."
              }
            },
            "GiantSwarmTags":{
              "type":"object",
              "defaultValue":{
                "provider":"F80D01C0-7AAC-4440-98F6-5061511962AD"
              }
            }
          },
          "variables":{
            "natGWName": "workers-nat-gw",
            "publicIpName": "workers-nat-gw-ip"
          },
          "resources": [
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "[parameters('publicIPAddressesAPIVersion')]",
              "name": "[variables('publicIpName')]",
              "location": "[resourceGroup().location]",
              "tags": {
                "provider": "[toUpper(parameters('GiantSwarmTags').provider)]"
              },
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "publicIPAllocationMethod": "Static",
                "publicIPAddressVersion": "IPv4"
              }
            },
            {
              "apiVersion": "[parameters('natGWApiVersion')]",
              "type": "Microsoft.Network/natGateways",
              "name": "[variables('natGWName')]",
              "location": "[resourceGroup().location]",
              "tags": {
                "provider": "[toUpper(parameters('GiantSwarmTags').provider)]"
              },
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "publicIPAddresses": [
                  {
                    "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
                  }
                ],
                "publicIPPrefixes": [],
                "idleTimeoutInMinutes": 4
              },
              "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIpName'))]"
              ]
            }
          ],
          "outputs": {
            "workersNatGWID": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/natGateways', variables('natGWName'))]"
            }
          }
        },
        "parameters":{
          "GiantSwarmTags":{
            "value":"[parameters('GiantSwarmTags')]"
          }
        }
      }
    },
    {
      "apiVersion":"2016-09-01",
      "name":"masters_nat_gw",
      "type":"Microsoft.Resources/deployments",
      "dependsOn":[],
      "properties":{
        "expressionEvaluationOptions":{
          "scope": "inner"
        },
        "mode":"incremental",
        "template":{
          "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "publicIPAddressesAPIVersion": {
              "defaultValue": "2018-12-01",
              "type": "String",
              "metadata": {
                "description": "API version used by the Microsoft.Network/publicIPAddresses resource."
              }
            },
            "natGWApiVersion": {
              "type": "string",
              "defaultValue":"2019-09-01",
              "metadata":{
                "description":"API version used by the Microsoft.Network/natGateways resource."
              }
            },
            "GiantSwarmTags":{
              "type":"object",
              "defaultValue":{
                "provider":"F80D01C0-7AAC-4440-98F6-5061511962AD"
              }
            }
          },
          "variables":{
            "natGWName": "masters-nat-gw",
            "publicIpName": "masters-nat-gw-ip"
          },
          "resources": [
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "[parameters('publicIPAddressesAPIVersion')]",
              "name": "[variables('publicIpName')]",
              "location": "[resourceGroup().location]",
              "tags": {
                "provider": "[toUpper(parameters('GiantSwarmTags').provider)]"
              },
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "publicIPAllocationMethod": "Static",
                "publicIPAddressVersion": "IPv4"
              }
            },
            {
              "apiVersion": "[parameters('natGWApiVersion')]",
              "type": "Microsoft.Network/natGateways",
              "name": "[variables('natGWName')]",
              "location": "[resourceGroup().location]",
              "tags": {
                "provider": "[toUpper(parameters('GiantSwarmTags').provider)]"
              },
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "publicIPAddresses": [
                  {
                    "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
                  }
                ],
                "publicIPPrefixes": [],
                "idleTimeoutInMinutes": 4
              },
              "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIpName'))]"
              ]
            }
          ],
          "outputs": {
            "mastersNatGWPublicIP": {
              "type": "string",
              "value": "[reference(variables('publicIpName'), parameters('publicIPAddressesAPIVersion')).ipAddress]"
            },
            "mastersNatGWID": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/natGateways', variables('natGWName'))]"
            }
          }
        },
        "parameters":{
          "GiantSwarmTags":{
            "value":"[parameters('GiantSwarmTags')]"
          }
        }
      }
    },
    {
      "apiVersion":"2016-09-01",
      "name":"virtual_network_setup",
      "condition":"[equals(parameters('initialProvisioning'), 'Yes')]",
      "type":"Microsoft.Resources/deployments",
      "dependsOn":[
        "route_table_setup"
      ],
      "properties":{
        "expressionEvaluationOptions":{
          "scope": "inner"
        },
        "mode":"incremental",
        "template":{
          "$schema":"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion":"1.0.0.0",
          "parameters":{
            "GiantSwarmTags":{
              "type":"object",
              "defaultValue":{
                "provider":"F80D01C0-7AAC-4440-98F6-5061511962AD"
              }
            },
            "virtualNetworksAPIVersion":{
              "type":"string",
              "defaultValue":"2016-12-01",
              "metadata":{
                "description":"API version used by the Microsoft.Network/virtualNetworks resource."
              }
            },
            "virtualNetworkName":{
              "type":"string"
            },
            "virtualNetworkCidr":{
              "type":"string"
            },
            "masterSubnetCidr":{
              "type":"string"
            },
            "workerSubnetCidr":{
              "type":"string"
            },
            "vnetGatewaySubnetName":{
              "type":"string"
            },
            "vpnSubnetCidr":{
              "type":"string"
            },
            "masterSecurityGroupID":{
              "type":"string"
            },
            "workerSecurityGroupID":{
              "type":"string"
            },
            "routeTableID":{
              "type":"string"
            },
            "workersNatGWID":{
              "type":"string"
            },
            "mastersNatGWID":{
              "type":"string"
            }
          },
          "variables":{
            "virtualNetworkID":"[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
            "masterSubnetName":"[concat(parameters('virtualNetworkName'), '-MasterSubnet')]",
            "masterSubnetID":"[concat(variables('virtualNetworkID'), '/subnets/', variables('masterSubnetName'))]",
            "workerSubnetName":"[concat(parameters('virtualNetworkName'), '-WorkerSubnet')]",
            "workerSubnetID":"[concat(variables('virtualNetworkID'), '/subnets/', variables('workerSubnetName'))]"
          },
          "resources":[
            {
              "type":"Microsoft.Network/virtualNetworks",
              "name":"[parameters('virtualNetworkName')]",
              "apiVersion":"[parameters('virtualNetworksAPIVersion')]",
              "location":"[resourceGroup().location]",
              "tags":{
                "provider":"[toUpper(parameters('GiantSwarmTags').provider)]"
              },
              "properties":{
                "addressSpace":{
                  "addressPrefixes":[
                    "[parameters('virtualNetworkCidr')]"
                  ]
                },
                "subnets":[
                  {
                    "name":"[variables('masterSubnetName')]",
                    "properties":{
                      "addressPrefix":"[parameters('masterSubnetCidr')]",
                      "natGateway": {
                        "id":"[parameters('mastersNatGWID')]"
                      },
                      "networkSecurityGroup":{
                        "id":"[parameters('masterSecurityGroupID')]"
                      },
                      "routeTable":{
                        "id":"[parameters('routeTableID')]"
                      },
                      "serviceEndpoints": [
                        { "service": "Microsoft.Storage" }
                      ]
                    }
                  },
                  {
                    "name":"[variables('workerSubnetName')]",
                    "properties":{
                      "addressPrefix":"[parameters('workerSubnetCidr')]",
                      "natGateway": {
                        "id":"[parameters('workersNatGWID')]"
                      },
                      "networkSecurityGroup":{
                        "id":"[parameters('workerSecurityGroupID')]"
                      },
                      "routeTable":{
                        "id":"[parameters('routeTableID')]"
                      },
                      "serviceEndpoints": [
                        { "service": "Microsoft.Storage" },
                        { "service": "Microsoft.Sql" },
                        { "service": "Microsoft.AzureCosmosDB" },
                        { "service": "Microsoft.KeyVault" },
                        { "service": "Microsoft.ServiceBus" },
                        { "service": "Microsoft.EventHub" },
                        { "service": "Microsoft.AzureActiveDirectory" },
                        { "service": "Microsoft.ContainerRegistry" },
                        { "service": "Microsoft.Web" }
                      ]
                    }
                  },
                  {
                    "name":"[parameters('vnetGatewaySubnetName')]",
                    "properties":{
                      "addressPrefix":"[parameters('vpnSubnetCidr')]"
                    }
                  }
                ]
              }
            }
          ],
          "outputs":{
            "masterSubnetID":{
              "type":"string",
              "value":"[variables('masterSubnetID')]"
            },
            "workerSubnetID":{
              "type":"string",
              "value":"[variables('workerSubnetID')]"
            }
          }
        },
        "parameters":{
          "GiantSwarmTags":{
            "value":"[parameters('GiantSwarmTags')]"
          },
          "virtualNetworkName":{
            "value":"[parameters('virtualNetworkName')]"
          },
          "virtualNetworkCidr":{
            "value":"[parameters('virtualNetworkCidr')]"
          },
          "masterSubnetCidr":{
            "value":"[parameters('masterSubnetCidr')]"
          },
          "workerSubnetCidr":{
            "value":"[parameters('workerSubnetCidr')]"
          },
          "vnetGatewaySubnetName":{
            "value":"[parameters('vnetGatewaySubnetName')]"
          },
          "vpnSubnetCidr":{
            "value":"[parameters('vpnSubnetCidr')]"
          },
          "masterSecurityGroupID":{
            "value":"[reference('security_groups_setup').outputs.masterSecurityGroupID.value]"
          },
          "workersNatGWID":{
            "value":"[reference('workers_nat_gw').outputs.workersNatGWID.value]"
          },
          "mastersNatGWID":{
            "value":"[reference('masters_nat_gw').outputs.mastersNatGWID.value]"
          },
          "workerSecurityGroupID":{
            "value":"[reference('security_groups_setup').outputs.workerSecurityGroupID.value]"
          },
          "routeTableID":{
            "value":"[reference('route_table_setup').outputs.id.value]"
          }
        }
      }
    },
    {
      "apiVersion":"2016-09-01",
      "name":"master_load_balancer_setup",
      "type":"Microsoft.Resources/deployments",
      "properties":{
        "expressionEvaluationOptions":{
          "scope": "inner"
        },
        "mode":"incremental",
        "template":{
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "publicIPAddressesAPIVersion": {
              "defaultValue": "2018-12-01",
              "type": "String",
              "metadata": {
                "description": "API version used by the Microsoft.Network/publicIPAddresses resource."
              }
            },
            "loadBalancersAPIVersion": {
              "defaultValue": "2018-12-01",
              "type": "String",
              "metadata": {
                "description": "API version used by the Microsoft.Network/loadBalancers resource."
              }
            },
            "clusterID": {
              "type": "String"
            },
            "GiantSwarmTags": {
              "defaultValue": {
                "provider": "F80D01C0-7AAC-4440-98F6-5061511962AD"
              },
              "type": "Object"
            },
            "ports": {
              "type": "Array"
            }
          },
          "variables": {
            "loadBalancerName": "[concat(parameters('clusterID'), '-API-PublicLoadBalancer')]",
            "loadBalancerSkuName": "Standard",
            "loadBalancerID": "[resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName'))]",
            "loadBalancerBackendPoolName": "[concat(parameters('clusterID'), '-API-PublicLoadBalancer-BackendPool')]",
            "loadBalancerBackendPoolID": "[concat(variables('loadBalancerID'),'/backendAddressPools/',variables('loadBalancerBackendPoolName'))]",
            "loadBalancerProbeName": "[concat(parameters('clusterID'), '-API-PublicLoadBalancer-Probe')]",
            "loadBalancerProbeID": "[concat(variables('loadBalancerID'),'/probes/',variables('loadBalancerProbeName'))]",
            "settings": {
              "API": {
                "PublicIP": {
                  "ID": "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('clusterID'), '-API-PublicLoadBalancer-PublicIP'))]",
                  "Name": "[concat(parameters('clusterID'), '-API-PublicLoadBalancer-PublicIP')]"
                },
                "Frontend": {
                  "ID": "[concat(variables('loadBalancerID'),'/frontendIPConfigurations/', concat(parameters('clusterID'), '-API-PublicLoadBalancer-Frontend'))]",
                  "Name": "[concat(parameters('clusterID'), '-API-PublicLoadBalancer-Frontend')]"
                }
              },
              "ETCD": {
                "PublicIP": {
                  "ID": "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('clusterID'), '-ETCD-PublicLoadBalancer-PublicIP'))]",
                  "Name": "[concat(parameters('clusterID'), '-ETCD-PublicLoadBalancer-PublicIP')]"
                },
                "Frontend": {
                  "ID": "[concat(variables('loadBalancerID'),'/frontendIPConfigurations/', concat(parameters('clusterID'), '-ETCD-PublicLoadBalancer-Frontend'))]",
                  "Name": "[concat(parameters('clusterID'), '-ETCD-PublicLoadBalancer-Frontend')]"
                }
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "[parameters('publicIPAddressesAPIVersion')]",
              "name": "[variables('settings').API.PublicIP.Name]",
              "location": "[resourceGroup().location]",
              "tags": {
                "provider": "[toUpper(parameters('GiantSwarmTags').provider)]"
              },
              "sku": {
                "name": "[variables('loadBalancerSkuName')]"
              },
              "properties": {
                "publicIPAllocationMethod": "Static",
                "publicIPAddressVersion": "IPv4"
              }
            },
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "[parameters('publicIPAddressesAPIVersion')]",
              "name": "[variables('settings').ETCD.PublicIP.Name]",
              "location": "[resourceGroup().location]",
              "tags": {
                "provider": "[toUpper(parameters('GiantSwarmTags').provider)]"
              },
              "sku": {
                "name": "[variables('loadBalancerSkuName')]"
              },
              "properties": {
                "publicIPAllocationMethod": "Static",
                "publicIPAddressVersion": "IPv4"
              }
            },
            {
              "type": "Microsoft.Network/loadBalancers",
              "apiVersion": "[parameters('loadBalancersAPIVersion')]",
              "name": "[variables('loadBalancerName')]",
              "location": "[resourceGroup().location]",
              "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('settings').API.PublicIP.Name)]",
                "[concat('Microsoft.Network/publicIPAddresses/', variables('settings').ETCD.PublicIP.Name)]"
              ],
              "tags": {
                "provider": "[toUpper(parameters('GiantSwarmTags').provider)]"
              },
              "sku": {
                "name": "[variables('loadBalancerSkuName')]"
              },
              "properties": {
                "frontendIPConfigurations": [
                  {
                    "name": "[variables('settings').API.Frontend.Name]",
                    "properties": {
                      "publicIPAddress": {
                        "id": "[variables('settings').API.PublicIP.ID]"
                      }
                    }
                  },
                  {
                    "name": "[variables('settings').ETCD.Frontend.Name]",
                    "properties": {
                      "publicIPAddress": {
                        "id": "[variables('settings').ETCD.PublicIP.ID]"
                      }
                    }
                  }
                ],
                "backendAddressPools": [
                  {
                    "name": "[variables('loadBalancerBackendPoolName')]"
                  }
                ],
                "copy": [
                  {
                    "name": "loadBalancingRules",
                    "count": "[length(parameters('ports'))]",
                    "input": {
                      "name": "[concat('loadBalancingRule-', string(add(copyIndex('loadBalancingRules'), 1)))]",
                      "properties": {
                        "frontendIPConfiguration": {
                          "id": "[variables('settings')[parameters('ports')[copyIndex('loadBalancingRules')].suffix].Frontend.ID]"
                        },
                        "backendAddressPool": {
                          "id": "[variables('loadBalancerBackendPoolID')]"
                        },
                        "protocol": "[parameters('ports')[copyIndex('loadBalancingRules')].protocol]",
                        "frontendPort": "[parameters('ports')[copyIndex('loadBalancingRules')].frontend]",
                        "backendPort": "[parameters('ports')[copyIndex('loadBalancingRules')].backend]",
                        "enableFloatingIP": false,
                        "probe": {
                          "id": "[concat(variables('loadBalancerProbeID'), '-', string(add(copyIndex('loadBalancingRules'), 1)))]"
                        }
                      }
                    }
                  },
                  {
                    "name": "probes",
                    "count": "[length(parameters('ports'))]",
                    "input": {
                      "name": "[concat(variables('loadBalancerProbeName'), '-', string(add(copyIndex('probes'), 1)))]",
                      "properties": {
                        "protocol": "[parameters('ports')[copyIndex('probes')].probeProtocol]",
                        "port": "[parameters('ports')[copyIndex('probes')].probePort]",
                        "intervalInSeconds": 5,
                        "numberOfProbes": 2,
                        "requestPath": "[parameters('ports')[copyIndex('probes')].requestPath]"
                      }
                    }
                  }
                ]
              }
            }
          ],
          "outputs": {
            "etcdIpAddress": {
              "type": "String",
              "value": "[reference(variables('settings').ETCD.PublicIP.ID, parameters('publicIPAddressesAPIVersion')).ipAddress]"
            },
            "apiIpAddress": {
              "type": "String",
              "value": "[reference(variables('settings').API.PublicIP.ID, parameters('publicIPAddressesAPIVersion')).ipAddress]"
            },
            "backendPoolId": {
              "type": "String",
              "value": "[reference(variables('loadBalancerID')).backendAddressPools[0].id]"
            }
          }
        },
        "parameters":{
          "clusterID":{
            "value":"[parameters('clusterID')]"
          },
          "GiantSwarmTags":{
            "value":"[parameters('GiantSwarmTags')]"
          },
          "ports":{
            "value":[
              {
                "protocol":"Tcp",
                "frontend":443,
                "backend":443,
                "probeProtocol": "Http",
                "probePort": 8089,
                "suffix": "API",
                "requestPath": "/healthz"
              },
              {
                "protocol":"Udp",
                "frontend":60001,
                "backend":60001,
                "probeProtocol": "Http",
                "probePort": 8089,
                "suffix": "API",
                "requestPath": "/healthz"
              },
              {
                "protocol":"Tcp",
                "frontend":2379,
                "backend":2379,
                "probeProtocol": "Tcp",
                "probePort": 2379,
                "suffix": "ETCD",
                "requestPath": null
              }
            ]
          }
        }
      }
    },
    {
      "apiVersion":"2016-09-01",
      "name":"kubernetes_api_dns_setup",
      "type":"Microsoft.Resources/deployments",
      "properties":{
        "expressionEvaluationOptions":{
          "scope": "inner"
        },
        "mode":"incremental",
        "template":{
          "$schema":"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion":"1.0.0.0",
          "parameters":{
            "dnsZone":{
              "type":"string"
            },
            "GiantSwarmTags":{
              "type":"object",
              "defaultValue":{
                "provider":"F80D01C0-7AAC-4440-98F6-5061511962AD"
              }
            },
            "prefix":{
              "type":"string"
            },
            "ipAddress":{
              "type":"string"
            }
          },
          "resources":[
            {
              "type":"Microsoft.Network/dnszones",
              "name":"[parameters('dnsZone')]",
              "apiVersion":"2016-04-01",
              "location":"global",
              "properties":{

              },
              "tags":{
                "provider":"[toUpper(parameters('GiantSwarmTags').provider)]"
              }
            },
            {
              "type":"Microsoft.Network/dnszones/a",
              "name":"[concat(parameters('dnsZone'), '/', parameters('prefix'))]",
              "apiVersion":"2016-04-01",
              "location":"global",
              "tags":{
                "provider":"[toUpper(parameters('GiantSwarmTags').provider)]"
              },
              "dependsOn":[
                "[parameters('dnsZone')]"
              ],
              "properties":{
                "TTL":3600,
                "ARecords":[
                  {
                    "ipv4Address":"[parameters('ipAddress')]"
                  }
                ]
              }
            }
          ]
        },
        "parameters":{
          "dnsZone":{
            "value":"[concat(parameters('clusterID'), '.k8s.', parameters('dnsZones').api.name)]"
          },
          "GiantSwarmTags":{
            "value":"[parameters('GiantSwarmTags')]"
          },
          "prefix":{
            "value":"api"
          },
          "ipAddress":{
            "value":"[reference('master_load_balancer_setup').outputs.apiIpAddress.value]"
          }
        }
      }
    },
    {
      "apiVersion":"2016-09-01",
      "name":"kubernetes_etcd_dns_setup",
      "type":"Microsoft.Resources/deployments",
      "properties":{
        "expressionEvaluationOptions":{
          "scope": "inner"
        },
        "mode":"incremental",
        "template":{
          "$schema":"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion":"1.0.0.0",
          "parameters":{
            "dnsZone":{
              "type":"string"
            },
            "GiantSwarmTags":{
              "type":"object",
              "defaultValue":{
                "provider":"F80D01C0-7AAC-4440-98F6-5061511962AD"
              }
            },
            "prefix":{
              "type":"string"
            },
            "ipAddress":{
              "type":"string"
            }
          },
          "resources":[
            {
              "type":"Microsoft.Network/dnszones",
              "name":"[parameters('dnsZone')]",
              "apiVersion":"2016-04-01",
              "location":"global",
              "properties":{

              },
              "tags":{
                "provider":"[toUpper(parameters('GiantSwarmTags').provider)]"
              }
            },
            {
              "type":"Microsoft.Network/dnszones/a",
              "name":"[concat(parameters('dnsZone'), '/', parameters('prefix'))]",
              "apiVersion":"2016-04-01",
              "location":"global",
              "tags":{
                "provider":"[toUpper(parameters('GiantSwarmTags').provider)]"
              },
              "dependsOn":[
                "[parameters('dnsZone')]"
              ],
              "properties":{
                "TTL":3600,
                "ARecords":[
                  {
                    "ipv4Address":"[parameters('ipAddress')]"
                  }
                ]
              }
            }
          ]
        },
        "parameters":{
          "dnsZone":{
            "value":"[concat(parameters('clusterID'), '.k8s.', parameters('dnsZones').api.name)]"
          },
          "GiantSwarmTags":{
            "value":"[parameters('GiantSwarmTags')]"
          },
          "prefix":{
            "value":"etcd"
          },
          "ipAddress":{
            "value":"[reference('master_load_balancer_setup').outputs.etcdIpAddress.value]"
          }
        }
      }
    },
    {
      "apiVersion":"2016-09-01",
      "name":"container_setup",
      "type":"Microsoft.Resources/deployments",
      "dependsOn":[
        "virtual_network_setup"
      ],
      "properties":{
        "expressionEvaluationOptions":{
          "scope": "inner"
        },
        "mode":"incremental",
        "template":{
          "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "blobContainerName": {
              "type": "string"
            },
            "clusterID":{
              "type":"string"
            },
            "controlPlaneWorkerSubnetID":{
              "type":"string"
            },
            "GiantSwarmTags":{
              "type":"object",
              "defaultValue":{
                "provider":"F80D01C0-7AAC-4440-98F6-5061511962AD"
              }
            },
            "masterSubnetID": {
              "type":"string"
            },
            "storageAccountName":{
              "type":"string"
            },
            "workerSubnetID": {
              "type":"string"
            },
            "insecureStorageAccount": {
              "type": "bool"
            }
          },
          "variables": {
            "accessTier": "Cool",
            "accountType": "Standard_RAGRS",
            "kind": "BlobStorage",
            "supportsHttpsTrafficOnly": true
          },
          "resources": [
            {
              "name": "[parameters('storageAccountName')]",
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2018-07-01",
              "location":"[resourceGroup().location]",
              "properties": {
                "accessTier": "[variables('accessTier')]",
                "accountType": "[variables('accountType')]",
                "supportsHttpsTrafficOnly": "[variables('supportsHttpsTrafficOnly')]",
                "networkAcls":{
                  "virtualNetworkRules": [
                    {"id":"[parameters('controlPlaneWorkerSubnetID')]"},
                    {"id":"[parameters('masterSubnetID')]"},
                    {"id":"[parameters('workerSubnetID')]"}
                  ],
                  "defaultAction":"[if(parameters('insecureStorageAccount'), 'Allow', 'Deny')]"
                }
              },
              "sku": {
                "name": "[variables('accountType')]"
              },
              "kind": "[variables('kind')]",
              "tags": {
                "provider":"[toUpper(parameters('GiantSwarmTags').provider)]"
              },
              "resources": [
                {
                  "name": "[concat('default/',parameters('blobContainerName'))]",
                  "type": "blobServices/containers",
                  "apiVersion": "2018-03-01-preview",
                  "dependsOn": [
                    "[parameters('storageAccountName')]"
                  ]
                }
              ]
            }
          ],
          "outputs": {}
        },
        "parameters":{
          "blobContainerName":{
            "value":"[parameters('blobContainerName')]"
          },
          "clusterID":{
            "value":"[parameters('clusterID')]"
          },
          "controlPlaneWorkerSubnetID":{
            "value":"[parameters('controlPlaneWorkerSubnetID')]"
          },
          "GiantSwarmTags":{
            "value":"[parameters('GiantSwarmTags')]"
          },
          "masterSubnetID":{
            "value":"[reference('virtual_network_setup', '2016-09-01').outputs.masterSubnetID.value]"
          },
          "workerSubnetID":{
            "value":"[reference('virtual_network_setup', '2016-09-01').outputs.workerSubnetID.value]"
          },
          "storageAccountName":{
            "value":"[parameters('storageAccountName')]"
          },
          "insecureStorageAccount":{
            "value":"[parameters('insecureStorageAccount')]"
          }
        }
      }
    },
    {
      "apiVersion":"2016-09-01",
      "name":"kubernetes_ingress_wildcard_dns_setup",
      "type":"Microsoft.Resources/deployments",
      "properties":{
        "expressionEvaluationOptions":{
          "scope": "inner"
        },
        "mode":"incremental",
        "template":{
          "$schema":"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion":"1.0.0.0",
          "parameters":{
            "dnsZone":{
              "type":"string"
            },
            "GiantSwarmTags":{
              "type":"object",
              "defaultValue":{
                "provider":"F80D01C0-7AAC-4440-98F6-5061511962AD"
              }
            },
            "prefix":{
              "type":"string"
            },
            "cname":{
              "type":"string"
            }
          },
          "resources":[
            {
              "type":"Microsoft.Network/dnszones",
              "name":"[parameters('dnsZone')]",
              "apiVersion":"2016-04-01",
              "location":"global",
              "properties":{

              },
              "tags":{
                "provider":"[toUpper(parameters('GiantSwarmTags').provider)]"
              }
            },
            {
              "type":"Microsoft.Network/dnszones/cname",
              "name":"[concat(parameters('dnsZone'), '/', parameters('prefix'))]",
              "apiVersion":"2016-04-01",
              "location":"global",
              "tags":{
                "provider":"[toUpper(parameters('GiantSwarmTags').provider)]"
              },
              "dependsOn":[
                "[parameters('dnsZone')]"
              ],
              "properties":{
                "TTL":3600,
                "CNAMERecord":{
                  "cname":"[parameters('cname')]"
                }
              }
            }
          ]
        },
        "parameters":{
          "dnsZone":{
            "value":"[concat(parameters('clusterID'), '.k8s.', parameters('dnsZones').ingress.name)]"
          },
          "GiantSwarmTags":{
            "value":"[parameters('GiantSwarmTags')]"
          },
          "prefix":{
            "value":"*"
          },
          "cname":{
            "value":"[concat('ingress.', parameters('clusterID'), '.k8s.', parameters('dnsZones').ingress.name)]"
          }
        }
      }
    }
  ]
}
